Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 1 (line 110):
-> $$ = nterm $@1 (1.1: )
Entering state 2
Stack now 0 2
Reading a token
Next token is token STRUCT (1.1: struct)
Shifting token STRUCT (1.1: struct)
Entering state 7
Stack now 0 2 7
Reading a token
Next token is token IDENTIFIER (1.1: book)
Shifting token IDENTIFIER (1.1: book)
Entering state 12
Stack now 0 2 7 12
Reading a token
Next token is token '{' (1.1: )
Reducing stack by rule 7 (line 154):
-> $$ = nterm $@2 (1.1: )
Entering state 17
Stack now 0 2 7 12 17
Next token is token '{' (1.1: )
Shifting token '{' (1.1: )
Entering state 21
Stack now 0 2 7 12 17 21
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 7 12 17 21 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 41
Stack now 0 2 7 12 17 21 41
Reading a token
Next token is token IDENTIFIER (1.1: pages)
Shifting token IDENTIFIER (1.1: pages)
Entering state 74
Stack now 0 2 7 12 17 21 41 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: pages)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 7 12 17 21 41 76
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 77
Stack now 0 2 7 12 17 21 41 77
Reducing stack by rule 85 (line 619):
   $1 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 7 12 17 21 41 78
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 120
Stack now 0 2 7 12 17 21 41 78 120
Reducing stack by rule 84 (line 615):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator_list (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm declaration (1.1: )
Entering state 54
Stack now 0 2 7 12 17 21 54
Reducing stack by rule 82 (line 609):
   $1 = nterm declaration (1.1: )
-> $$ = nterm declaration_list (1.1: )
Entering state 55
Stack now 0 2 7 12 17 21 55
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 7 12 17 21 55 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 41
Stack now 0 2 7 12 17 21 55 41
Reading a token
Next token is token IDENTIFIER (1.1: wt)
Shifting token IDENTIFIER (1.1: wt)
Entering state 74
Stack now 0 2 7 12 17 21 55 41 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: wt)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 7 12 17 21 55 41 76
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 77
Stack now 0 2 7 12 17 21 55 41 77
Reducing stack by rule 85 (line 619):
   $1 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 7 12 17 21 55 41 78
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 120
Stack now 0 2 7 12 17 21 55 41 78 120
Reducing stack by rule 84 (line 615):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator_list (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm declaration (1.1: )
Entering state 90
Stack now 0 2 7 12 17 21 55 90
Reducing stack by rule 83 (line 611):
   $1 = nterm declaration_list (1.1: )
   $2 = nterm declaration (1.1: )
-> $$ = nterm declaration_list (1.1: )
Entering state 55
Stack now 0 2 7 12 17 21 55
Reading a token
Next token is token '}' (1.1: )
Shifting token '}' (1.1: )
Entering state 91
Stack now 0 2 7 12 17 21 55 91
Reading a token
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 126
Stack now 0 2 7 12 17 21 55 91 126
Reducing stack by rule 8 (line 154):
   $1 = token STRUCT (1.1: struct)
   $2 = token IDENTIFIER (1.1: book)
   $3 = nterm $@2 (1.1: )
   $4 = token '{' (1.1: )
   $5 = nterm declaration_list (1.1: )
   $6 = token '}' (1.1: )
   $7 = token ';' (1.1: )
-> $$ = nterm struct_specifier (1.1: )
Entering state 9
Stack now 0 2 9
Reducing stack by rule 3 (line 133):
   $1 = nterm struct_specifier (1.1: )
-> $$ = nterm translation_unit (1.1: )
Entering state 8
Stack now 0 2 8
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 11
Stack now 0 2 8 11
Reading a token
Next token is token IDENTIFIER (1.1: foo)
Shifting token IDENTIFIER (1.1: foo)
Entering state 15
Stack now 0 2 8 11 15
Reading a token
Next token is token '(' (1.1: )
Shifting token '(' (1.1: )
Entering state 18
Stack now 0 2 8 11 15 18
Reading a token
Next token is token INT (1.1: int)
Reducing stack by rule 14 (line 227):
-> $$ = nterm $@3 (1.1: )
Entering state 23
Stack now 0 2 8 11 15 18 23
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 15 18 23 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 56
Stack now 0 2 8 11 15 18 23 56
Reading a token
Next token is token IDENTIFIER (1.1: y)
Shifting token IDENTIFIER (1.1: y)
Entering state 74
Stack now 0 2 8 11 15 18 23 56 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: y)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 15 18 23 56 76
Reading a token
Next token is token ',' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 92
Stack now 0 2 8 11 15 18 23 56 92
Reducing stack by rule 19 (line 278):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator (1.1: )
-> $$ = nterm parameter_declaration (1.1: )
Entering state 58
Stack now 0 2 8 11 15 18 23 58
Next token is token ',' (1.1: )
Shifting token ',' (1.1: )
Entering state 94
Stack now 0 2 8 11 15 18 23 58 94
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 15 18 23 58 94 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 56
Stack now 0 2 8 11 15 18 23 58 94 56
Reading a token
Next token is token IDENTIFIER (1.1: z)
Shifting token IDENTIFIER (1.1: z)
Entering state 74
Stack now 0 2 8 11 15 18 23 58 94 56 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: z)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 15 18 23 58 94 56 76
Reading a token
Next token is token ',' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 92
Stack now 0 2 8 11 15 18 23 58 94 56 92
Reducing stack by rule 19 (line 278):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator (1.1: )
-> $$ = nterm parameter_declaration (1.1: )
Entering state 58
Stack now 0 2 8 11 15 18 23 58 94 58
Next token is token ',' (1.1: )
Shifting token ',' (1.1: )
Entering state 94
Stack now 0 2 8 11 15 18 23 58 94 58 94
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 15 18 23 58 94 58 94 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 56
Stack now 0 2 8 11 15 18 23 58 94 58 94 56
Reading a token
Next token is token IDENTIFIER (1.1: w)
Shifting token IDENTIFIER (1.1: w)
Entering state 74
Stack now 0 2 8 11 15 18 23 58 94 58 94 56 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: w)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 15 18 23 58 94 58 94 56 76
Reading a token
Next token is token ',' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 92
Stack now 0 2 8 11 15 18 23 58 94 58 94 56 92
Reducing stack by rule 19 (line 278):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator (1.1: )
-> $$ = nterm parameter_declaration (1.1: )
Entering state 58
Stack now 0 2 8 11 15 18 23 58 94 58 94 58
Next token is token ',' (1.1: )
Shifting token ',' (1.1: )
Entering state 94
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 56
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 56
Reading a token
Next token is token IDENTIFIER (1.1: u)
Shifting token IDENTIFIER (1.1: u)
Entering state 74
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 56 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: u)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 56 76
Reading a token
Next token is token ',' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 92
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 56 92
Reducing stack by rule 19 (line 278):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator (1.1: )
-> $$ = nterm parameter_declaration (1.1: )
Entering state 58
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58
Next token is token ',' (1.1: )
Shifting token ',' (1.1: )
Entering state 94
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58 94
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58 94 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 56
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58 94 56
Reading a token
Next token is token IDENTIFIER (1.1: v)
Shifting token IDENTIFIER (1.1: v)
Entering state 74
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58 94 56 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: v)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58 94 56 76
Reading a token
Next token is token ')' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 92
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58 94 56 92
Reducing stack by rule 19 (line 278):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator (1.1: )
-> $$ = nterm parameter_declaration (1.1: )
Entering state 58
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58 94 58
Next token is token ')' (1.1: )
Reducing stack by rule 17 (line 268):
   $1 = nterm parameter_declaration (1.1: )
-> $$ = nterm parameter_list (1.1: )
Entering state 127
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58 94 127
Reducing stack by rule 18 (line 272):
   $1 = nterm parameter_declaration (1.1: )
   $2 = token ',' (1.1: )
   $3 = nterm parameter_list (1.1: )
-> $$ = nterm parameter_list (1.1: )
Entering state 127
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 127
Reducing stack by rule 18 (line 272):
   $1 = nterm parameter_declaration (1.1: )
   $2 = token ',' (1.1: )
   $3 = nterm parameter_list (1.1: )
-> $$ = nterm parameter_list (1.1: )
Entering state 127
Stack now 0 2 8 11 15 18 23 58 94 58 94 127
Reducing stack by rule 18 (line 272):
   $1 = nterm parameter_declaration (1.1: )
   $2 = token ',' (1.1: )
   $3 = nterm parameter_list (1.1: )
-> $$ = nterm parameter_list (1.1: )
Entering state 127
Stack now 0 2 8 11 15 18 23 58 94 127
Reducing stack by rule 18 (line 272):
   $1 = nterm parameter_declaration (1.1: )
   $2 = token ',' (1.1: )
   $3 = nterm parameter_list (1.1: )
-> $$ = nterm parameter_list (1.1: )
Entering state 57
Stack now 0 2 8 11 15 18 23 57
Next token is token ')' (1.1: )
Shifting token ')' (1.1: )
Entering state 93
Stack now 0 2 8 11 15 18 23 57 93
Reducing stack by rule 15 (line 227):
   $1 = token IDENTIFIER (1.1: foo)
   $2 = token '(' (1.1: )
   $3 = nterm $@3 (1.1: )
   $4 = nterm parameter_list (1.1: )
   $5 = token ')' (1.1: )
-> $$ = nterm fun_declarator (1.1: )
Entering state 16
Stack now 0 2 8 11 16
Reading a token
Next token is token '{' (1.1: )
Shifting token '{' (1.1: )
Entering state 19
Stack now 0 2 8 11 16 19
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 16 19 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 41
Stack now 0 2 8 11 16 19 41
Reading a token
Next token is token IDENTIFIER (1.1: x)
Shifting token IDENTIFIER (1.1: x)
Entering state 74
Stack now 0 2 8 11 16 19 41 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: x)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 41 76
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 77
Stack now 0 2 8 11 16 19 41 77
Reducing stack by rule 85 (line 619):
   $1 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 8 11 16 19 41 78
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 120
Stack now 0 2 8 11 16 19 41 78 120
Reducing stack by rule 84 (line 615):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator_list (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm declaration (1.1: )
Entering state 54
Stack now 0 2 8 11 16 19 54
Reducing stack by rule 82 (line 609):
   $1 = nterm declaration (1.1: )
-> $$ = nterm declaration_list (1.1: )
Entering state 53
Stack now 0 2 8 11 16 19 53
Reading a token
Next token is token RETURN (1.1: return)
Shifting token RETURN (1.1: return)
Entering state 32
Stack now 0 2 8 11 16 19 53 32
Reading a token
Next token is token INT_CONSTANT (1.1: 4)
Shifting token INT_CONSTANT (1.1: 4)
Entering state 26
Stack now 0 2 8 11 16 19 53 32 26
Reducing stack by rule 69 (line 557):
   $1 = token INT_CONSTANT (1.1: 4)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 32 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 32 48
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 32 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 32 71
Next token is token ';' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 32 69
Next token is token ';' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 32 68
Next token is token ';' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 32 67
Next token is token ';' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 32 66
Next token is token ';' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 65
Stack now 0 2 8 11 16 19 53 32 65
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 103
Stack now 0 2 8 11 16 19 53 32 65 103
Reducing stack by rule 36 (line 363):
   $1 = token RETURN (1.1: return)
   $2 = nterm expression (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 43
Stack now 0 2 8 11 16 19 53 43
Reducing stack by rule 28 (line 331):
   $1 = nterm statement (1.1: )
-> $$ = nterm statement_list (1.1: )
Entering state 89
Stack now 0 2 8 11 16 19 53 89
Reading a token
Next token is token '}' (1.1: )
Shifting token '}' (1.1: )
Entering state 125
Stack now 0 2 8 11 16 19 53 89 125
Reducing stack by rule 27 (line 326):
   $1 = token '{' (1.1: )
   $2 = nterm declaration_list (1.1: )
   $3 = nterm statement_list (1.1: )
   $4 = token '}' (1.1: )
-> $$ = nterm compound_statement (1.1: )
Entering state 20
Stack now 0 2 8 11 16 20
Reducing stack by rule 9 (line 169):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm fun_declarator (1.1: )
   $3 = nterm compound_statement (1.1: )
-> $$ = nterm function_definition (1.1: )
Entering state 14
Stack now 0 2 8 14
Reducing stack by rule 6 (line 148):
   $1 = nterm translation_unit (1.1: )
   $2 = nterm function_definition (1.1: )
-> $$ = nterm translation_unit (1.1: )
Entering state 8
Stack now 0 2 8
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 11
Stack now 0 2 8 11
Reading a token
Next token is token IDENTIFIER (1.1: main)
Shifting token IDENTIFIER (1.1: main)
Entering state 15
Stack now 0 2 8 11 15
Reading a token
Next token is token '(' (1.1: )
Shifting token '(' (1.1: )
Entering state 18
Stack now 0 2 8 11 15 18
Reading a token
Next token is token ')' (1.1: )
Shifting token ')' (1.1: )
Entering state 22
Stack now 0 2 8 11 15 18 22
Reducing stack by rule 16 (line 257):
   $1 = token IDENTIFIER (1.1: main)
   $2 = token '(' (1.1: )
   $3 = token ')' (1.1: )
-> $$ = nterm fun_declarator (1.1: )
Entering state 16
Stack now 0 2 8 11 16
Reading a token
Next token is token '{' (1.1: )
Shifting token '{' (1.1: )
Entering state 19
Stack now 0 2 8 11 16 19
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 16 19 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 41
Stack now 0 2 8 11 16 19 41
Reading a token
Next token is token IDENTIFIER (1.1: x)
Shifting token IDENTIFIER (1.1: x)
Entering state 74
Stack now 0 2 8 11 16 19 41 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: x)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 41 76
Reading a token
Next token is token ',' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 77
Stack now 0 2 8 11 16 19 41 77
Reducing stack by rule 85 (line 619):
   $1 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 8 11 16 19 41 78
Next token is token ',' (1.1: )
Shifting token ',' (1.1: )
Entering state 119
Stack now 0 2 8 11 16 19 41 78 119
Reading a token
Next token is token IDENTIFIER (1.1: y)
Shifting token IDENTIFIER (1.1: y)
Entering state 74
Stack now 0 2 8 11 16 19 41 78 119 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: y)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 41 78 119 76
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 149
Stack now 0 2 8 11 16 19 41 78 119 149
Reducing stack by rule 86 (line 629):
   $1 = nterm declarator_list (1.1: )
   $2 = token ',' (1.1: )
   $3 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 8 11 16 19 41 78
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 120
Stack now 0 2 8 11 16 19 41 78 120
Reducing stack by rule 84 (line 615):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator_list (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm declaration (1.1: )
Entering state 54
Stack now 0 2 8 11 16 19 54
Reducing stack by rule 82 (line 609):
   $1 = nterm declaration (1.1: )
-> $$ = nterm declaration_list (1.1: )
Entering state 53
Stack now 0 2 8 11 16 19 53
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 16 19 53 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 41
Stack now 0 2 8 11 16 19 53 41
Reading a token
Next token is token IDENTIFIER (1.1: w)
Shifting token IDENTIFIER (1.1: w)
Entering state 74
Stack now 0 2 8 11 16 19 53 41 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: w)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 53 41 76
Reading a token
Next token is token '[' (1.1: )
Shifting token '[' (1.1: )
Entering state 118
Stack now 0 2 8 11 16 19 53 41 76 118
Reading a token
Next token is token INT_CONSTANT (1.1: 10)
Shifting token INT_CONSTANT (1.1: 10)
Entering state 148
Stack now 0 2 8 11 16 19 53 41 76 118 148
Reading a token
Next token is token ']' (1.1: )
Shifting token ']' (1.1: )
Entering state 157
Stack now 0 2 8 11 16 19 53 41 76 118 148 157
Reducing stack by rule 21 (line 294):
   $1 = nterm declarator_arr (1.1: )
   $2 = token '[' (1.1: )
   $3 = token INT_CONSTANT (1.1: 10)
   $4 = token ']' (1.1: )
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 53 41 76
Reading a token
Next token is token '[' (1.1: )
Shifting token '[' (1.1: )
Entering state 118
Stack now 0 2 8 11 16 19 53 41 76 118
Reading a token
Next token is token INT_CONSTANT (1.1: 20)
Shifting token INT_CONSTANT (1.1: 20)
Entering state 148
Stack now 0 2 8 11 16 19 53 41 76 118 148
Reading a token
Next token is token ']' (1.1: )
Shifting token ']' (1.1: )
Entering state 157
Stack now 0 2 8 11 16 19 53 41 76 118 148 157
Reducing stack by rule 21 (line 294):
   $1 = nterm declarator_arr (1.1: )
   $2 = token '[' (1.1: )
   $3 = token INT_CONSTANT (1.1: 20)
   $4 = token ']' (1.1: )
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 53 41 76
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 77
Stack now 0 2 8 11 16 19 53 41 77
Reducing stack by rule 85 (line 619):
   $1 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 8 11 16 19 53 41 78
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 120
Stack now 0 2 8 11 16 19 53 41 78 120
Reducing stack by rule 84 (line 615):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator_list (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm declaration (1.1: )
Entering state 90
Stack now 0 2 8 11 16 19 53 90
Reducing stack by rule 83 (line 611):
   $1 = nterm declaration_list (1.1: )
   $2 = nterm declaration (1.1: )
-> $$ = nterm declaration_list (1.1: )
Entering state 53
Stack now 0 2 8 11 16 19 53
Reading a token
Next token is token STRUCT (1.1: struct)
Shifting token STRUCT (1.1: struct)
Entering state 24
Stack now 0 2 8 11 16 19 53 24
Reading a token
Next token is token IDENTIFIER (1.1: book)
Shifting token IDENTIFIER (1.1: book)
Entering state 59
Stack now 0 2 8 11 16 19 53 24 59
Reducing stack by rule 13 (line 213):
   $1 = token STRUCT (1.1: struct)
   $2 = token IDENTIFIER (1.1: book)
-> $$ = nterm type_specifier (1.1: )
Entering state 41
Stack now 0 2 8 11 16 19 53 41
Reading a token
Next token is token IDENTIFIER (1.1: sapiens)
Shifting token IDENTIFIER (1.1: sapiens)
Entering state 74
Stack now 0 2 8 11 16 19 53 41 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: sapiens)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 53 41 76
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 77
Stack now 0 2 8 11 16 19 53 41 77
Reducing stack by rule 85 (line 619):
   $1 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 8 11 16 19 53 41 78
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 120
Stack now 0 2 8 11 16 19 53 41 78 120
Reducing stack by rule 84 (line 615):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator_list (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm declaration (1.1: )
Entering state 90
Stack now 0 2 8 11 16 19 53 90
Reducing stack by rule 83 (line 611):
   $1 = nterm declaration_list (1.1: )
   $2 = nterm declaration (1.1: )
-> $$ = nterm declaration_list (1.1: )
Entering state 53
Stack now 0 2 8 11 16 19 53
Reading a token
Next token is token STRUCT (1.1: struct)
Shifting token STRUCT (1.1: struct)
Entering state 24
Stack now 0 2 8 11 16 19 53 24
Reading a token
Next token is token IDENTIFIER (1.1: book)
Shifting token IDENTIFIER (1.1: book)
Entering state 59
Stack now 0 2 8 11 16 19 53 24 59
Reducing stack by rule 13 (line 213):
   $1 = token STRUCT (1.1: struct)
   $2 = token IDENTIFIER (1.1: book)
-> $$ = nterm type_specifier (1.1: )
Entering state 41
Stack now 0 2 8 11 16 19 53 41
Reading a token
Next token is token '*' (1.1: )
Shifting token '*' (1.1: )
Entering state 75
Stack now 0 2 8 11 16 19 53 41 75
Reading a token
Next token is token IDENTIFIER (1.1: saps)
Shifting token IDENTIFIER (1.1: saps)
Entering state 74
Stack now 0 2 8 11 16 19 53 41 75 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: saps)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 53 41 75 76
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 117
Stack now 0 2 8 11 16 19 53 41 75 117
Reducing stack by rule 23 (line 307):
   $1 = token '*' (1.1: )
   $2 = nterm declarator (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 77
Stack now 0 2 8 11 16 19 53 41 77
Reducing stack by rule 85 (line 619):
   $1 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 8 11 16 19 53 41 78
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 120
Stack now 0 2 8 11 16 19 53 41 78 120
Reducing stack by rule 84 (line 615):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator_list (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm declaration (1.1: )
Entering state 90
Stack now 0 2 8 11 16 19 53 90
Reducing stack by rule 83 (line 611):
   $1 = nterm declaration_list (1.1: )
   $2 = nterm declaration (1.1: )
-> $$ = nterm declaration_list (1.1: )
Entering state 53
Stack now 0 2 8 11 16 19 53
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 16 19 53 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 41
Stack now 0 2 8 11 16 19 53 41
Reading a token
Next token is token IDENTIFIER (1.1: z)
Shifting token IDENTIFIER (1.1: z)
Entering state 74
Stack now 0 2 8 11 16 19 53 41 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: z)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 53 41 76
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 77
Stack now 0 2 8 11 16 19 53 41 77
Reducing stack by rule 85 (line 619):
   $1 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 8 11 16 19 53 41 78
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 120
Stack now 0 2 8 11 16 19 53 41 78 120
Reducing stack by rule 84 (line 615):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator_list (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm declaration (1.1: )
Entering state 90
Stack now 0 2 8 11 16 19 53 90
Reducing stack by rule 83 (line 611):
   $1 = nterm declaration_list (1.1: )
   $2 = nterm declaration (1.1: )
-> $$ = nterm declaration_list (1.1: )
Entering state 53
Stack now 0 2 8 11 16 19 53
Reading a token
Next token is token FOR (1.1: for)
Shifting token FOR (1.1: for)
Entering state 31
Stack now 0 2 8 11 16 19 53 31
Reading a token
Next token is token '(' (1.1: )
Shifting token '(' (1.1: )
Entering state 63
Stack now 0 2 8 11 16 19 53 31 63
Reading a token
Next token is token IDENTIFIER (1.1: x)
Shifting token IDENTIFIER (1.1: x)
Entering state 64
Stack now 0 2 8 11 16 19 53 31 63 64
Reading a token
Next token is token '=' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: x)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 31 63 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 31 63 48
Next token is token '=' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 47
Stack now 0 2 8 11 16 19 53 31 63 47
Next token is token '=' (1.1: )
Shifting token '=' (1.1: )
Entering state 82
Stack now 0 2 8 11 16 19 53 31 63 47 82
Reading a token
Next token is token INT_CONSTANT (1.1: 0)
Shifting token INT_CONSTANT (1.1: 0)
Entering state 26
Stack now 0 2 8 11 16 19 53 31 63 47 82 26
Reducing stack by rule 69 (line 557):
   $1 = token INT_CONSTANT (1.1: 0)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 31 63 47 82 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 31 63 47 82 48
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 31 63 47 82 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 31 63 47 82 71
Next token is token ';' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 31 63 47 82 69
Next token is token ';' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 31 63 47 82 68
Next token is token ';' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 31 63 47 82 67
Next token is token ';' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 31 63 47 82 66
Next token is token ';' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 121
Stack now 0 2 8 11 16 19 53 31 63 47 82 121
Next token is token ';' (1.1: )
Reducing stack by rule 37 (line 368):
   $1 = nterm unary_expression (1.1: )
   $2 = token '=' (1.1: )
   $3 = nterm expression (1.1: )
-> $$ = nterm assignment_expression (1.1: )
Entering state 100
Stack now 0 2 8 11 16 19 53 31 63 100
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 133
Stack now 0 2 8 11 16 19 53 31 63 100 133
Reading a token
Next token is token IDENTIFIER (1.1: x)
Shifting token IDENTIFIER (1.1: x)
Entering state 64
Stack now 0 2 8 11 16 19 53 31 63 100 133 64
Reading a token
Next token is token '<' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: x)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 31 63 100 133 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 31 63 100 133 48
Next token is token '<' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 31 63 100 133 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 31 63 100 133 71
Next token is token '<' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 31 63 100 133 69
Next token is token '<' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 31 63 100 133 68
Next token is token '<' (1.1: )
Shifting token '<' (1.1: )
Entering state 109
Stack now 0 2 8 11 16 19 53 31 63 100 133 68 109
Reading a token
Next token is token INT_CONSTANT (1.1: 10)
Shifting token INT_CONSTANT (1.1: 10)
Entering state 26
Stack now 0 2 8 11 16 19 53 31 63 100 133 68 109 26
Reducing stack by rule 69 (line 557):
   $1 = token INT_CONSTANT (1.1: 10)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 31 63 100 133 68 109 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 31 63 100 133 68 109 48
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 31 63 100 133 68 109 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 31 63 100 133 68 109 71
Next token is token ';' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 142
Stack now 0 2 8 11 16 19 53 31 63 100 133 68 109 142
Next token is token ';' (1.1: )
Reducing stack by rule 49 (line 413):
   $1 = nterm relational_expression (1.1: )
   $2 = token '<' (1.1: )
   $3 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 31 63 100 133 68
Next token is token ';' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 31 63 100 133 67
Next token is token ';' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 31 63 100 133 66
Next token is token ';' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 155
Stack now 0 2 8 11 16 19 53 31 63 100 133 155
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 159
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159
Reading a token
Next token is token IDENTIFIER (1.1: x)
Shifting token IDENTIFIER (1.1: x)
Entering state 64
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 64
Reading a token
Next token is token '=' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: x)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 48
Next token is token '=' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 47
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47
Next token is token '=' (1.1: )
Shifting token '=' (1.1: )
Entering state 82
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82
Reading a token
Next token is token IDENTIFIER (1.1: x)
Shifting token IDENTIFIER (1.1: x)
Entering state 64
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 64
Reading a token
Next token is token '+' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: x)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 48
Next token is token '+' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 71
Next token is token '+' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 69
Next token is token '+' (1.1: )
Shifting token '+' (1.1: )
Entering state 111
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 69 111
Reading a token
Next token is token INT_CONSTANT (1.1: 1)
Shifting token INT_CONSTANT (1.1: 1)
Entering state 26
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 69 111 26
Reducing stack by rule 69 (line 557):
   $1 = token INT_CONSTANT (1.1: 1)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 69 111 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 69 111 48
Reading a token
Next token is token ')' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 69 111 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 144
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 69 111 144
Next token is token ')' (1.1: )
Reducing stack by rule 54 (line 430):
   $1 = nterm additive_expression (1.1: )
   $2 = token '+' (1.1: )
   $3 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 69
Next token is token ')' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 68
Next token is token ')' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 67
Next token is token ')' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 66
Next token is token ')' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 121
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 121
Next token is token ')' (1.1: )
Reducing stack by rule 37 (line 368):
   $1 = nterm unary_expression (1.1: )
   $2 = token '=' (1.1: )
   $3 = nterm expression (1.1: )
-> $$ = nterm assignment_expression (1.1: )
Entering state 161
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 161
Next token is token ')' (1.1: )
Shifting token ')' (1.1: )
Entering state 162
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 161 162
Reading a token
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 40
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 161 162 40
Reducing stack by rule 30 (line 345):
   $1 = token ';' (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 163
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 161 162 163
Reducing stack by rule 81 (line 604):
   $1 = token FOR (1.1: for)
   $2 = token '(' (1.1: )
   $3 = nterm assignment_expression (1.1: )
   $4 = token ';' (1.1: )
   $5 = nterm expression (1.1: )
   $6 = token ';' (1.1: )
   $7 = nterm assignment_expression (1.1: )
   $8 = token ')' (1.1: )
   $9 = nterm statement (1.1: )
-> $$ = nterm iteration_statement (1.1: )
Entering state 52
Stack now 0 2 8 11 16 19 53 52
Reducing stack by rule 33 (line 354):
   $1 = nterm iteration_statement (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 43
Stack now 0 2 8 11 16 19 53 43
Reducing stack by rule 28 (line 331):
   $1 = nterm statement (1.1: )
-> $$ = nterm statement_list (1.1: )
Entering state 89
Stack now 0 2 8 11 16 19 53 89
Reading a token
Next token is token IDENTIFIER (1.1: sapiens)
Shifting token IDENTIFIER (1.1: sapiens)
Entering state 25
Stack now 0 2 8 11 16 19 53 89 25
Reading a token
Next token is token '.' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: sapiens)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 48
Next token is token '.' (1.1: )
Shifting token '.' (1.1: )
Entering state 86
Stack now 0 2 8 11 16 19 53 89 48 86
Reading a token
Next token is token IDENTIFIER (1.1: page)
Shifting token IDENTIFIER (1.1: page)
Entering state 124
Stack now 0 2 8 11 16 19 53 89 48 86 124
Reducing stack by rule 65 (line 507):
   $1 = nterm postfix_expression (1.1: )
   $2 = token '.' (1.1: )
   $3 = token IDENTIFIER (1.1: page)
using this rule
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 48
Reading a token
Next token is token '=' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 47
Stack now 0 2 8 11 16 19 53 89 47
Next token is token '=' (1.1: )
Shifting token '=' (1.1: )
Entering state 82
Stack now 0 2 8 11 16 19 53 89 47 82
Reading a token
Next token is token INT_CONSTANT (1.1: 1)
Shifting token INT_CONSTANT (1.1: 1)
Entering state 26
Stack now 0 2 8 11 16 19 53 89 47 82 26
Reducing stack by rule 69 (line 557):
   $1 = token INT_CONSTANT (1.1: 1)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 47 82 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 47 82 48
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 89 47 82 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 89 47 82 71
Next token is token ';' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 89 47 82 69
Next token is token ';' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 89 47 82 68
Next token is token ';' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 89 47 82 67
Next token is token ';' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 89 47 82 66
Next token is token ';' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 121
Stack now 0 2 8 11 16 19 53 89 47 82 121
Next token is token ';' (1.1: )
Reducing stack by rule 37 (line 368):
   $1 = nterm unary_expression (1.1: )
   $2 = token '=' (1.1: )
   $3 = nterm expression (1.1: )
-> $$ = nterm assignment_expression (1.1: )
Entering state 44
Stack now 0 2 8 11 16 19 53 89 44
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 81
Stack now 0 2 8 11 16 19 53 89 44 81
Reducing stack by rule 38 (line 373):
   $1 = nterm assignment_expression (1.1: )
   $2 = token ';' (1.1: )
-> $$ = nterm assignment_statement (1.1: )
Entering state 45
Stack now 0 2 8 11 16 19 53 89 45
Reducing stack by rule 34 (line 357):
   $1 = nterm assignment_statement (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 80
Stack now 0 2 8 11 16 19 53 89 80
Reducing stack by rule 29 (line 339):
   $1 = nterm statement_list (1.1: )
   $2 = nterm statement (1.1: )
-> $$ = nterm statement_list (1.1: )
Entering state 89
Stack now 0 2 8 11 16 19 53 89
Reading a token
Next token is token IF (1.1: if)
Shifting token IF (1.1: if)
Entering state 29
Stack now 0 2 8 11 16 19 53 89 29
Reading a token
Next token is token '(' (1.1: )
Shifting token '(' (1.1: )
Entering state 61
Stack now 0 2 8 11 16 19 53 89 29 61
Reading a token
Next token is token IDENTIFIER (1.1: y)
Shifting token IDENTIFIER (1.1: y)
Entering state 64
Stack now 0 2 8 11 16 19 53 89 29 61 64
Reading a token
Next token is token '>' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: y)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 29 61 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 29 61 48
Next token is token '>' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 89 29 61 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 89 29 61 71
Next token is token '>' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 89 29 61 69
Next token is token '>' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 89 29 61 68
Next token is token '>' (1.1: )
Shifting token '>' (1.1: )
Entering state 110
Stack now 0 2 8 11 16 19 53 89 29 61 68 110
Reading a token
Next token is token INT_CONSTANT (1.1: 1)
Shifting token INT_CONSTANT (1.1: 1)
Entering state 26
Stack now 0 2 8 11 16 19 53 89 29 61 68 110 26
Reducing stack by rule 69 (line 557):
   $1 = token INT_CONSTANT (1.1: 1)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 29 61 68 110 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 29 61 68 110 48
Reading a token
Next token is token ')' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 89 29 61 68 110 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 89 29 61 68 110 71
Next token is token ')' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 143
Stack now 0 2 8 11 16 19 53 89 29 61 68 110 143
Next token is token ')' (1.1: )
Reducing stack by rule 50 (line 416):
   $1 = nterm relational_expression (1.1: )
   $2 = token '>' (1.1: )
   $3 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 89 29 61 68
Next token is token ')' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 89 29 61 67
Next token is token ')' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 89 29 61 66
Next token is token ')' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 98
Stack now 0 2 8 11 16 19 53 89 29 61 98
Next token is token ')' (1.1: )
Shifting token ')' (1.1: )
Entering state 131
Stack now 0 2 8 11 16 19 53 89 29 61 98 131
Reading a token
Next token is token '{' (1.1: )
Shifting token '{' (1.1: )
Entering state 36
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36
Reading a token
Next token is token IDENTIFIER (1.1: x)
Shifting token IDENTIFIER (1.1: x)
Entering state 25
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 25
Reading a token
Next token is token '=' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: x)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 48
Next token is token '=' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 47
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47
Next token is token '=' (1.1: )
Shifting token '=' (1.1: )
Entering state 82
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82
Reading a token
Next token is token IDENTIFIER (1.1: x)
Shifting token IDENTIFIER (1.1: x)
Entering state 64
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 64
Reading a token
Next token is token '-' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: x)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 48
Next token is token '-' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 71
Next token is token '-' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 69
Next token is token '-' (1.1: )
Shifting token '-' (1.1: )
Entering state 112
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 69 112
Reading a token
Next token is token INT_CONSTANT (1.1: 1)
Shifting token INT_CONSTANT (1.1: 1)
Entering state 26
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 69 112 26
Reducing stack by rule 69 (line 557):
   $1 = token INT_CONSTANT (1.1: 1)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 69 112 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 69 112 48
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 69 112 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 145
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 69 112 145
Next token is token ';' (1.1: )
Reducing stack by rule 55 (line 442):
   $1 = nterm additive_expression (1.1: )
   $2 = token '-' (1.1: )
   $3 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 69
Next token is token ';' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 68
Next token is token ';' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 67
Next token is token ';' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 66
Next token is token ';' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 121
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 121
Next token is token ';' (1.1: )
Reducing stack by rule 37 (line 368):
   $1 = nterm unary_expression (1.1: )
   $2 = token '=' (1.1: )
   $3 = nterm expression (1.1: )
-> $$ = nterm assignment_expression (1.1: )
Entering state 44
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 44
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 81
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 44 81
Reducing stack by rule 38 (line 373):
   $1 = nterm assignment_expression (1.1: )
   $2 = token ';' (1.1: )
-> $$ = nterm assignment_statement (1.1: )
Entering state 45
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 45
Reducing stack by rule 34 (line 357):
   $1 = nterm assignment_statement (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 43
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 43
Reducing stack by rule 28 (line 331):
   $1 = nterm statement (1.1: )
-> $$ = nterm statement_list (1.1: )
Entering state 73
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73
Reading a token
Next token is token IDENTIFIER (1.1: y)
Shifting token IDENTIFIER (1.1: y)
Entering state 25
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 25
Reading a token
Next token is token '=' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: y)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 48
Next token is token '=' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 47
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47
Next token is token '=' (1.1: )
Shifting token '=' (1.1: )
Entering state 82
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82
Reading a token
Next token is token IDENTIFIER (1.1: y)
Shifting token IDENTIFIER (1.1: y)
Entering state 64
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 64
Reading a token
Next token is token '+' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: y)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 48
Next token is token '+' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 71
Next token is token '+' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 69
Next token is token '+' (1.1: )
Shifting token '+' (1.1: )
Entering state 111
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 69 111
Reading a token
Next token is token INT_CONSTANT (1.1: 1)
Shifting token INT_CONSTANT (1.1: 1)
Entering state 26
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 69 111 26
Reducing stack by rule 69 (line 557):
   $1 = token INT_CONSTANT (1.1: 1)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 69 111 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 69 111 48
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 69 111 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 144
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 69 111 144
Next token is token ';' (1.1: )
Reducing stack by rule 54 (line 430):
   $1 = nterm additive_expression (1.1: )
   $2 = token '+' (1.1: )
   $3 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 69
Next token is token ';' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 68
Next token is token ';' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 67
Next token is token ';' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 66
Next token is token ';' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 121
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 121
Next token is token ';' (1.1: )
Reducing stack by rule 37 (line 368):
   $1 = nterm unary_expression (1.1: )
   $2 = token '=' (1.1: )
   $3 = nterm expression (1.1: )
-> $$ = nterm assignment_expression (1.1: )
Entering state 44
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 44
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 81
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 44 81
Reducing stack by rule 38 (line 373):
   $1 = nterm assignment_expression (1.1: )
   $2 = token ';' (1.1: )
-> $$ = nterm assignment_statement (1.1: )
Entering state 45
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 45
Reducing stack by rule 34 (line 357):
   $1 = nterm assignment_statement (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 80
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 80
Reducing stack by rule 29 (line 339):
   $1 = nterm statement_list (1.1: )
   $2 = nterm statement (1.1: )
-> $$ = nterm statement_list (1.1: )
Entering state 73
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73
Reading a token
Next token is token '}' (1.1: )
Shifting token '}' (1.1: )
Entering state 116
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 116
Reducing stack by rule 31 (line 348):
   $1 = token '{' (1.1: )
   $2 = nterm statement_list (1.1: )
   $3 = token '}' (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 153
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 153
Reading a token
Next token is token ELSE (1.1: else)
Shifting token ELSE (1.1: else)
Entering state 158
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 153 158
Reading a token
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 40
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 153 158 40
Reducing stack by rule 30 (line 345):
   $1 = token ';' (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 160
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 153 158 160
Reducing stack by rule 79 (line 596):
   $1 = token IF (1.1: if)
   $2 = token '(' (1.1: )
   $3 = nterm expression (1.1: )
   $4 = token ')' (1.1: )
   $5 = nterm statement (1.1: )
   $6 = token ELSE (1.1: else)
   $7 = nterm statement (1.1: )
-> $$ = nterm selection_statement (1.1: )
Entering state 51
Stack now 0 2 8 11 16 19 53 89 51
Reducing stack by rule 32 (line 351):
   $1 = nterm selection_statement (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 80
Stack now 0 2 8 11 16 19 53 89 80
Reducing stack by rule 29 (line 339):
   $1 = nterm statement_list (1.1: )
   $2 = nterm statement (1.1: )
-> $$ = nterm statement_list (1.1: )
Entering state 89
Stack now 0 2 8 11 16 19 53 89
Reading a token
Next token is token RETURN (1.1: return)
Shifting token RETURN (1.1: return)
Entering state 32
Stack now 0 2 8 11 16 19 53 89 32
Reading a token
Next token is token IDENTIFIER (1.1: y)
Shifting token IDENTIFIER (1.1: y)
Entering state 64
Stack now 0 2 8 11 16 19 53 89 32 64
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: y)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 32 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 32 48
Next token is token ';' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 89 32 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 89 32 71
Next token is token ';' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 89 32 69
Next token is token ';' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 89 32 68
Next token is token ';' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 89 32 67
Next token is token ';' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 89 32 66
Next token is token ';' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 65
Stack now 0 2 8 11 16 19 53 89 32 65
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 103
Stack now 0 2 8 11 16 19 53 89 32 65 103
Reducing stack by rule 36 (line 363):
   $1 = token RETURN (1.1: return)
   $2 = nterm expression (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 80
Stack now 0 2 8 11 16 19 53 89 80
Reducing stack by rule 29 (line 339):
   $1 = nterm statement_list (1.1: )
   $2 = nterm statement (1.1: )
-> $$ = nterm statement_list (1.1: )
Entering state 89
Stack now 0 2 8 11 16 19 53 89
Reading a token
Next token is token '}' (1.1: )
Shifting token '}' (1.1: )
Entering state 125
Stack now 0 2 8 11 16 19 53 89 125
Reducing stack by rule 27 (line 326):
   $1 = token '{' (1.1: )
   $2 = nterm declaration_list (1.1: )
   $3 = nterm statement_list (1.1: )
   $4 = token '}' (1.1: )
-> $$ = nterm compound_statement (1.1: )
Entering state 20
Stack now 0 2 8 11 16 20
Reducing stack by rule 9 (line 169):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm fun_declarator (1.1: )
   $3 = nterm compound_statement (1.1: )
-> $$ = nterm function_definition (1.1: )
Entering state 14
Stack now 0 2 8 14
Reducing stack by rule 6 (line 148):
   $1 = nterm translation_unit (1.1: )
   $2 = nterm function_definition (1.1: )
-> $$ = nterm translation_unit (1.1: )
Entering state 8
Stack now 0 2 8
Reading a token
Next token is token "end of file" (1.1: )
Reducing stack by rule 2 (line 110):
   $1 = nterm $@1 (1.1: )
   $2 = nterm translation_unit (1.1: )
-> $$ = nterm begin_nterm (1.1: )
Entering state 1
Stack now 0 1
Next token is token "end of file" (1.1: )
Shifting token "end of file" (1.1: )
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" (1.1: )
Cleanup: popping nterm begin_nterm (1.1: )
Parsing round 1 done
Starting parse
Entering state 0
Stack now 0
Reducing stack by rule 1 (line 110):
-> $$ = nterm $@1 (1.1: )
Entering state 2
Stack now 0 2
Reading a token
Next token is token STRUCT (1.1: struct)
Shifting token STRUCT (1.1: struct)
Entering state 7
Stack now 0 2 7
Reading a token
Next token is token IDENTIFIER (1.1: book)
Shifting token IDENTIFIER (1.1: book)
Entering state 12
Stack now 0 2 7 12
Reading a token
Next token is token '{' (1.1: )
Reducing stack by rule 7 (line 154):
-> $$ = nterm $@2 (1.1: )
Entering state 17
Stack now 0 2 7 12 17
Next token is token '{' (1.1: )
Shifting token '{' (1.1: )
Entering state 21
Stack now 0 2 7 12 17 21
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 7 12 17 21 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 41
Stack now 0 2 7 12 17 21 41
Reading a token
Next token is token IDENTIFIER (1.1: pages)
Shifting token IDENTIFIER (1.1: pages)
Entering state 74
Stack now 0 2 7 12 17 21 41 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: pages)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 7 12 17 21 41 76
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 77
Stack now 0 2 7 12 17 21 41 77
Reducing stack by rule 85 (line 619):
   $1 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 7 12 17 21 41 78
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 120
Stack now 0 2 7 12 17 21 41 78 120
Reducing stack by rule 84 (line 615):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator_list (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm declaration (1.1: )
Entering state 54
Stack now 0 2 7 12 17 21 54
Reducing stack by rule 82 (line 609):
   $1 = nterm declaration (1.1: )
-> $$ = nterm declaration_list (1.1: )
Entering state 55
Stack now 0 2 7 12 17 21 55
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 7 12 17 21 55 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 41
Stack now 0 2 7 12 17 21 55 41
Reading a token
Next token is token IDENTIFIER (1.1: wt)
Shifting token IDENTIFIER (1.1: wt)
Entering state 74
Stack now 0 2 7 12 17 21 55 41 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: wt)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 7 12 17 21 55 41 76
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 77
Stack now 0 2 7 12 17 21 55 41 77
Reducing stack by rule 85 (line 619):
   $1 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 7 12 17 21 55 41 78
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 120
Stack now 0 2 7 12 17 21 55 41 78 120
Reducing stack by rule 84 (line 615):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator_list (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm declaration (1.1: )
Entering state 90
Stack now 0 2 7 12 17 21 55 90
Reducing stack by rule 83 (line 611):
   $1 = nterm declaration_list (1.1: )
   $2 = nterm declaration (1.1: )
-> $$ = nterm declaration_list (1.1: )
Entering state 55
Stack now 0 2 7 12 17 21 55
Reading a token
Next token is token '}' (1.1: )
Shifting token '}' (1.1: )
Entering state 91
Stack now 0 2 7 12 17 21 55 91
Reading a token
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 126
Stack now 0 2 7 12 17 21 55 91 126
Reducing stack by rule 8 (line 154):
   $1 = token STRUCT (1.1: struct)
   $2 = token IDENTIFIER (1.1: book)
   $3 = nterm $@2 (1.1: )
   $4 = token '{' (1.1: )
   $5 = nterm declaration_list (1.1: )
   $6 = token '}' (1.1: )
   $7 = token ';' (1.1: )
-> $$ = nterm struct_specifier (1.1: )
Entering state 9
Stack now 0 2 9
Reducing stack by rule 3 (line 133):
   $1 = nterm struct_specifier (1.1: )
-> $$ = nterm translation_unit (1.1: )
Entering state 8
Stack now 0 2 8
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 11
Stack now 0 2 8 11
Reading a token
Next token is token IDENTIFIER (1.1: foo)
Shifting token IDENTIFIER (1.1: foo)
Entering state 15
Stack now 0 2 8 11 15
Reading a token
Next token is token '(' (1.1: )
Shifting token '(' (1.1: )
Entering state 18
Stack now 0 2 8 11 15 18
Reading a token
Next token is token INT (1.1: int)
Reducing stack by rule 14 (line 227):
-> $$ = nterm $@3 (1.1: )
Entering state 23
Stack now 0 2 8 11 15 18 23
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 15 18 23 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 56
Stack now 0 2 8 11 15 18 23 56
Reading a token
Next token is token IDENTIFIER (1.1: y)
Shifting token IDENTIFIER (1.1: y)
Entering state 74
Stack now 0 2 8 11 15 18 23 56 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: y)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 15 18 23 56 76
Reading a token
Next token is token ',' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 92
Stack now 0 2 8 11 15 18 23 56 92
Reducing stack by rule 19 (line 278):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator (1.1: )
-> $$ = nterm parameter_declaration (1.1: )
Entering state 58
Stack now 0 2 8 11 15 18 23 58
Next token is token ',' (1.1: )
Shifting token ',' (1.1: )
Entering state 94
Stack now 0 2 8 11 15 18 23 58 94
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 15 18 23 58 94 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 56
Stack now 0 2 8 11 15 18 23 58 94 56
Reading a token
Next token is token IDENTIFIER (1.1: z)
Shifting token IDENTIFIER (1.1: z)
Entering state 74
Stack now 0 2 8 11 15 18 23 58 94 56 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: z)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 15 18 23 58 94 56 76
Reading a token
Next token is token ',' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 92
Stack now 0 2 8 11 15 18 23 58 94 56 92
Reducing stack by rule 19 (line 278):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator (1.1: )
-> $$ = nterm parameter_declaration (1.1: )
Entering state 58
Stack now 0 2 8 11 15 18 23 58 94 58
Next token is token ',' (1.1: )
Shifting token ',' (1.1: )
Entering state 94
Stack now 0 2 8 11 15 18 23 58 94 58 94
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 15 18 23 58 94 58 94 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 56
Stack now 0 2 8 11 15 18 23 58 94 58 94 56
Reading a token
Next token is token IDENTIFIER (1.1: w)
Shifting token IDENTIFIER (1.1: w)
Entering state 74
Stack now 0 2 8 11 15 18 23 58 94 58 94 56 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: w)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 15 18 23 58 94 58 94 56 76
Reading a token
Next token is token ',' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 92
Stack now 0 2 8 11 15 18 23 58 94 58 94 56 92
Reducing stack by rule 19 (line 278):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator (1.1: )
-> $$ = nterm parameter_declaration (1.1: )
Entering state 58
Stack now 0 2 8 11 15 18 23 58 94 58 94 58
Next token is token ',' (1.1: )
Shifting token ',' (1.1: )
Entering state 94
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 56
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 56
Reading a token
Next token is token IDENTIFIER (1.1: u)
Shifting token IDENTIFIER (1.1: u)
Entering state 74
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 56 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: u)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 56 76
Reading a token
Next token is token ',' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 92
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 56 92
Reducing stack by rule 19 (line 278):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator (1.1: )
-> $$ = nterm parameter_declaration (1.1: )
Entering state 58
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58
Next token is token ',' (1.1: )
Shifting token ',' (1.1: )
Entering state 94
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58 94
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58 94 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 56
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58 94 56
Reading a token
Next token is token IDENTIFIER (1.1: v)
Shifting token IDENTIFIER (1.1: v)
Entering state 74
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58 94 56 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: v)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58 94 56 76
Reading a token
Next token is token ')' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 92
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58 94 56 92
Reducing stack by rule 19 (line 278):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator (1.1: )
-> $$ = nterm parameter_declaration (1.1: )
Entering state 58
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58 94 58
Next token is token ')' (1.1: )
Reducing stack by rule 17 (line 268):
   $1 = nterm parameter_declaration (1.1: )
-> $$ = nterm parameter_list (1.1: )
Entering state 127
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 58 94 127
Reducing stack by rule 18 (line 272):
   $1 = nterm parameter_declaration (1.1: )
   $2 = token ',' (1.1: )
   $3 = nterm parameter_list (1.1: )
-> $$ = nterm parameter_list (1.1: )
Entering state 127
Stack now 0 2 8 11 15 18 23 58 94 58 94 58 94 127
Reducing stack by rule 18 (line 272):
   $1 = nterm parameter_declaration (1.1: )
   $2 = token ',' (1.1: )
   $3 = nterm parameter_list (1.1: )
-> $$ = nterm parameter_list (1.1: )
Entering state 127
Stack now 0 2 8 11 15 18 23 58 94 58 94 127
Reducing stack by rule 18 (line 272):
   $1 = nterm parameter_declaration (1.1: )
   $2 = token ',' (1.1: )
   $3 = nterm parameter_list (1.1: )
-> $$ = nterm parameter_list (1.1: )
Entering state 127
Stack now 0 2 8 11 15 18 23 58 94 127
Reducing stack by rule 18 (line 272):
   $1 = nterm parameter_declaration (1.1: )
   $2 = token ',' (1.1: )
   $3 = nterm parameter_list (1.1: )
-> $$ = nterm parameter_list (1.1: )
Entering state 57
Stack now 0 2 8 11 15 18 23 57
Next token is token ')' (1.1: )
Shifting token ')' (1.1: )
Entering state 93
Stack now 0 2 8 11 15 18 23 57 93
Reducing stack by rule 15 (line 227):
   $1 = token IDENTIFIER (1.1: foo)
   $2 = token '(' (1.1: )
   $3 = nterm $@3 (1.1: )
   $4 = nterm parameter_list (1.1: )
   $5 = token ')' (1.1: )
-> $$ = nterm fun_declarator (1.1: )
Entering state 16
Stack now 0 2 8 11 16
Reading a token
Next token is token '{' (1.1: )
Shifting token '{' (1.1: )
Entering state 19
Stack now 0 2 8 11 16 19
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 16 19 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 41
Stack now 0 2 8 11 16 19 41
Reading a token
Next token is token IDENTIFIER (1.1: x)
Shifting token IDENTIFIER (1.1: x)
Entering state 74
Stack now 0 2 8 11 16 19 41 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: x)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 41 76
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 77
Stack now 0 2 8 11 16 19 41 77
Reducing stack by rule 85 (line 619):
   $1 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 8 11 16 19 41 78
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 120
Stack now 0 2 8 11 16 19 41 78 120
Reducing stack by rule 84 (line 615):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator_list (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm declaration (1.1: )
Entering state 54
Stack now 0 2 8 11 16 19 54
Reducing stack by rule 82 (line 609):
   $1 = nterm declaration (1.1: )
-> $$ = nterm declaration_list (1.1: )
Entering state 53
Stack now 0 2 8 11 16 19 53
Reading a token
Next token is token RETURN (1.1: return)
Shifting token RETURN (1.1: return)
Entering state 32
Stack now 0 2 8 11 16 19 53 32
Reading a token
Next token is token INT_CONSTANT (1.1: 4)
Shifting token INT_CONSTANT (1.1: 4)
Entering state 26
Stack now 0 2 8 11 16 19 53 32 26
Reducing stack by rule 69 (line 557):
   $1 = token INT_CONSTANT (1.1: 4)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 32 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 32 48
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 32 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 32 71
Next token is token ';' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 32 69
Next token is token ';' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 32 68
Next token is token ';' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 32 67
Next token is token ';' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 32 66
Next token is token ';' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 65
Stack now 0 2 8 11 16 19 53 32 65
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 103
Stack now 0 2 8 11 16 19 53 32 65 103
Reducing stack by rule 36 (line 363):
   $1 = token RETURN (1.1: return)
   $2 = nterm expression (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 43
Stack now 0 2 8 11 16 19 53 43
Reducing stack by rule 28 (line 331):
   $1 = nterm statement (1.1: )
-> $$ = nterm statement_list (1.1: )
Entering state 89
Stack now 0 2 8 11 16 19 53 89
Reading a token
Next token is token '}' (1.1: )
Shifting token '}' (1.1: )
Entering state 125
Stack now 0 2 8 11 16 19 53 89 125
Reducing stack by rule 27 (line 326):
   $1 = token '{' (1.1: )
   $2 = nterm declaration_list (1.1: )
   $3 = nterm statement_list (1.1: )
   $4 = token '}' (1.1: )
-> $$ = nterm compound_statement (1.1: )
Entering state 20
Stack now 0 2 8 11 16 20
Reducing stack by rule 9 (line 169):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm fun_declarator (1.1: )
   $3 = nterm compound_statement (1.1: )
-> $$ = nterm function_definition (1.1: )
Entering state 14
Stack now 0 2 8 14
Reducing stack by rule 6 (line 148):
   $1 = nterm translation_unit (1.1: )
   $2 = nterm function_definition (1.1: )
-> $$ = nterm translation_unit (1.1: )
Entering state 8
Stack now 0 2 8
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 11
Stack now 0 2 8 11
Reading a token
Next token is token IDENTIFIER (1.1: main)
Shifting token IDENTIFIER (1.1: main)
Entering state 15
Stack now 0 2 8 11 15
Reading a token
Next token is token '(' (1.1: )
Shifting token '(' (1.1: )
Entering state 18
Stack now 0 2 8 11 15 18
Reading a token
Next token is token ')' (1.1: )
Shifting token ')' (1.1: )
Entering state 22
Stack now 0 2 8 11 15 18 22
Reducing stack by rule 16 (line 257):
   $1 = token IDENTIFIER (1.1: main)
   $2 = token '(' (1.1: )
   $3 = token ')' (1.1: )
-> $$ = nterm fun_declarator (1.1: )
Entering state 16
Stack now 0 2 8 11 16
Reading a token
Next token is token '{' (1.1: )
Shifting token '{' (1.1: )
Entering state 19
Stack now 0 2 8 11 16 19
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 16 19 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 41
Stack now 0 2 8 11 16 19 41
Reading a token
Next token is token IDENTIFIER (1.1: x)
Shifting token IDENTIFIER (1.1: x)
Entering state 74
Stack now 0 2 8 11 16 19 41 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: x)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 41 76
Reading a token
Next token is token ',' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 77
Stack now 0 2 8 11 16 19 41 77
Reducing stack by rule 85 (line 619):
   $1 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 8 11 16 19 41 78
Next token is token ',' (1.1: )
Shifting token ',' (1.1: )
Entering state 119
Stack now 0 2 8 11 16 19 41 78 119
Reading a token
Next token is token IDENTIFIER (1.1: y)
Shifting token IDENTIFIER (1.1: y)
Entering state 74
Stack now 0 2 8 11 16 19 41 78 119 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: y)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 41 78 119 76
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 149
Stack now 0 2 8 11 16 19 41 78 119 149
Reducing stack by rule 86 (line 629):
   $1 = nterm declarator_list (1.1: )
   $2 = token ',' (1.1: )
   $3 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 8 11 16 19 41 78
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 120
Stack now 0 2 8 11 16 19 41 78 120
Reducing stack by rule 84 (line 615):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator_list (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm declaration (1.1: )
Entering state 54
Stack now 0 2 8 11 16 19 54
Reducing stack by rule 82 (line 609):
   $1 = nterm declaration (1.1: )
-> $$ = nterm declaration_list (1.1: )
Entering state 53
Stack now 0 2 8 11 16 19 53
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 16 19 53 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 41
Stack now 0 2 8 11 16 19 53 41
Reading a token
Next token is token IDENTIFIER (1.1: w)
Shifting token IDENTIFIER (1.1: w)
Entering state 74
Stack now 0 2 8 11 16 19 53 41 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: w)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 53 41 76
Reading a token
Next token is token '[' (1.1: )
Shifting token '[' (1.1: )
Entering state 118
Stack now 0 2 8 11 16 19 53 41 76 118
Reading a token
Next token is token INT_CONSTANT (1.1: 10)
Shifting token INT_CONSTANT (1.1: 10)
Entering state 148
Stack now 0 2 8 11 16 19 53 41 76 118 148
Reading a token
Next token is token ']' (1.1: )
Shifting token ']' (1.1: )
Entering state 157
Stack now 0 2 8 11 16 19 53 41 76 118 148 157
Reducing stack by rule 21 (line 294):
   $1 = nterm declarator_arr (1.1: )
   $2 = token '[' (1.1: )
   $3 = token INT_CONSTANT (1.1: 10)
   $4 = token ']' (1.1: )
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 53 41 76
Reading a token
Next token is token '[' (1.1: )
Shifting token '[' (1.1: )
Entering state 118
Stack now 0 2 8 11 16 19 53 41 76 118
Reading a token
Next token is token INT_CONSTANT (1.1: 20)
Shifting token INT_CONSTANT (1.1: 20)
Entering state 148
Stack now 0 2 8 11 16 19 53 41 76 118 148
Reading a token
Next token is token ']' (1.1: )
Shifting token ']' (1.1: )
Entering state 157
Stack now 0 2 8 11 16 19 53 41 76 118 148 157
Reducing stack by rule 21 (line 294):
   $1 = nterm declarator_arr (1.1: )
   $2 = token '[' (1.1: )
   $3 = token INT_CONSTANT (1.1: 20)
   $4 = token ']' (1.1: )
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 53 41 76
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 77
Stack now 0 2 8 11 16 19 53 41 77
Reducing stack by rule 85 (line 619):
   $1 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 8 11 16 19 53 41 78
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 120
Stack now 0 2 8 11 16 19 53 41 78 120
Reducing stack by rule 84 (line 615):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator_list (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm declaration (1.1: )
Entering state 90
Stack now 0 2 8 11 16 19 53 90
Reducing stack by rule 83 (line 611):
   $1 = nterm declaration_list (1.1: )
   $2 = nterm declaration (1.1: )
-> $$ = nterm declaration_list (1.1: )
Entering state 53
Stack now 0 2 8 11 16 19 53
Reading a token
Next token is token STRUCT (1.1: struct)
Shifting token STRUCT (1.1: struct)
Entering state 24
Stack now 0 2 8 11 16 19 53 24
Reading a token
Next token is token IDENTIFIER (1.1: book)
Shifting token IDENTIFIER (1.1: book)
Entering state 59
Stack now 0 2 8 11 16 19 53 24 59
Reducing stack by rule 13 (line 213):
   $1 = token STRUCT (1.1: struct)
   $2 = token IDENTIFIER (1.1: book)
-> $$ = nterm type_specifier (1.1: )
Entering state 41
Stack now 0 2 8 11 16 19 53 41
Reading a token
Next token is token IDENTIFIER (1.1: sapiens)
Shifting token IDENTIFIER (1.1: sapiens)
Entering state 74
Stack now 0 2 8 11 16 19 53 41 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: sapiens)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 53 41 76
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 77
Stack now 0 2 8 11 16 19 53 41 77
Reducing stack by rule 85 (line 619):
   $1 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 8 11 16 19 53 41 78
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 120
Stack now 0 2 8 11 16 19 53 41 78 120
Reducing stack by rule 84 (line 615):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator_list (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm declaration (1.1: )
Entering state 90
Stack now 0 2 8 11 16 19 53 90
Reducing stack by rule 83 (line 611):
   $1 = nterm declaration_list (1.1: )
   $2 = nterm declaration (1.1: )
-> $$ = nterm declaration_list (1.1: )
Entering state 53
Stack now 0 2 8 11 16 19 53
Reading a token
Next token is token STRUCT (1.1: struct)
Shifting token STRUCT (1.1: struct)
Entering state 24
Stack now 0 2 8 11 16 19 53 24
Reading a token
Next token is token IDENTIFIER (1.1: book)
Shifting token IDENTIFIER (1.1: book)
Entering state 59
Stack now 0 2 8 11 16 19 53 24 59
Reducing stack by rule 13 (line 213):
   $1 = token STRUCT (1.1: struct)
   $2 = token IDENTIFIER (1.1: book)
-> $$ = nterm type_specifier (1.1: )
Entering state 41
Stack now 0 2 8 11 16 19 53 41
Reading a token
Next token is token '*' (1.1: )
Shifting token '*' (1.1: )
Entering state 75
Stack now 0 2 8 11 16 19 53 41 75
Reading a token
Next token is token IDENTIFIER (1.1: saps)
Shifting token IDENTIFIER (1.1: saps)
Entering state 74
Stack now 0 2 8 11 16 19 53 41 75 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: saps)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 53 41 75 76
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 117
Stack now 0 2 8 11 16 19 53 41 75 117
Reducing stack by rule 23 (line 307):
   $1 = token '*' (1.1: )
   $2 = nterm declarator (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 77
Stack now 0 2 8 11 16 19 53 41 77
Reducing stack by rule 85 (line 619):
   $1 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 8 11 16 19 53 41 78
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 120
Stack now 0 2 8 11 16 19 53 41 78 120
Reducing stack by rule 84 (line 615):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator_list (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm declaration (1.1: )
Entering state 90
Stack now 0 2 8 11 16 19 53 90
Reducing stack by rule 83 (line 611):
   $1 = nterm declaration_list (1.1: )
   $2 = nterm declaration (1.1: )
-> $$ = nterm declaration_list (1.1: )
Entering state 53
Stack now 0 2 8 11 16 19 53
Reading a token
Next token is token INT (1.1: int)
Shifting token INT (1.1: int)
Entering state 5
Stack now 0 2 8 11 16 19 53 5
Reducing stack by rule 11 (line 188):
   $1 = token INT (1.1: int)
-> $$ = nterm type_specifier (1.1: )
Entering state 41
Stack now 0 2 8 11 16 19 53 41
Reading a token
Next token is token IDENTIFIER (1.1: z)
Shifting token IDENTIFIER (1.1: z)
Entering state 74
Stack now 0 2 8 11 16 19 53 41 74
Reducing stack by rule 20 (line 287):
   $1 = token IDENTIFIER (1.1: z)
-> $$ = nterm declarator_arr (1.1: )
Entering state 76
Stack now 0 2 8 11 16 19 53 41 76
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 22 (line 304):
   $1 = nterm declarator_arr (1.1: )
-> $$ = nterm declarator (1.1: )
Entering state 77
Stack now 0 2 8 11 16 19 53 41 77
Reducing stack by rule 85 (line 619):
   $1 = nterm declarator (1.1: )
-> $$ = nterm declarator_list (1.1: )
Entering state 78
Stack now 0 2 8 11 16 19 53 41 78
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 120
Stack now 0 2 8 11 16 19 53 41 78 120
Reducing stack by rule 84 (line 615):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm declarator_list (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm declaration (1.1: )
Entering state 90
Stack now 0 2 8 11 16 19 53 90
Reducing stack by rule 83 (line 611):
   $1 = nterm declaration_list (1.1: )
   $2 = nterm declaration (1.1: )
-> $$ = nterm declaration_list (1.1: )
Entering state 53
Stack now 0 2 8 11 16 19 53
Reading a token
Next token is token FOR (1.1: for)
Shifting token FOR (1.1: for)
Entering state 31
Stack now 0 2 8 11 16 19 53 31
Reading a token
Next token is token '(' (1.1: )
Shifting token '(' (1.1: )
Entering state 63
Stack now 0 2 8 11 16 19 53 31 63
Reading a token
Next token is token IDENTIFIER (1.1: x)
Shifting token IDENTIFIER (1.1: x)
Entering state 64
Stack now 0 2 8 11 16 19 53 31 63 64
Reading a token
Next token is token '=' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: x)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 31 63 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 31 63 48
Next token is token '=' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 47
Stack now 0 2 8 11 16 19 53 31 63 47
Next token is token '=' (1.1: )
Shifting token '=' (1.1: )
Entering state 82
Stack now 0 2 8 11 16 19 53 31 63 47 82
Reading a token
Next token is token INT_CONSTANT (1.1: 0)
Shifting token INT_CONSTANT (1.1: 0)
Entering state 26
Stack now 0 2 8 11 16 19 53 31 63 47 82 26
Reducing stack by rule 69 (line 557):
   $1 = token INT_CONSTANT (1.1: 0)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 31 63 47 82 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 31 63 47 82 48
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 31 63 47 82 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 31 63 47 82 71
Next token is token ';' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 31 63 47 82 69
Next token is token ';' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 31 63 47 82 68
Next token is token ';' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 31 63 47 82 67
Next token is token ';' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 31 63 47 82 66
Next token is token ';' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 121
Stack now 0 2 8 11 16 19 53 31 63 47 82 121
Next token is token ';' (1.1: )
Reducing stack by rule 37 (line 368):
   $1 = nterm unary_expression (1.1: )
   $2 = token '=' (1.1: )
   $3 = nterm expression (1.1: )
-> $$ = nterm assignment_expression (1.1: )
Entering state 100
Stack now 0 2 8 11 16 19 53 31 63 100
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 133
Stack now 0 2 8 11 16 19 53 31 63 100 133
Reading a token
Next token is token IDENTIFIER (1.1: x)
Shifting token IDENTIFIER (1.1: x)
Entering state 64
Stack now 0 2 8 11 16 19 53 31 63 100 133 64
Reading a token
Next token is token '<' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: x)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 31 63 100 133 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 31 63 100 133 48
Next token is token '<' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 31 63 100 133 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 31 63 100 133 71
Next token is token '<' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 31 63 100 133 69
Next token is token '<' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 31 63 100 133 68
Next token is token '<' (1.1: )
Shifting token '<' (1.1: )
Entering state 109
Stack now 0 2 8 11 16 19 53 31 63 100 133 68 109
Reading a token
Next token is token INT_CONSTANT (1.1: 10)
Shifting token INT_CONSTANT (1.1: 10)
Entering state 26
Stack now 0 2 8 11 16 19 53 31 63 100 133 68 109 26
Reducing stack by rule 69 (line 557):
   $1 = token INT_CONSTANT (1.1: 10)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 31 63 100 133 68 109 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 31 63 100 133 68 109 48
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 31 63 100 133 68 109 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 31 63 100 133 68 109 71
Next token is token ';' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 142
Stack now 0 2 8 11 16 19 53 31 63 100 133 68 109 142
Next token is token ';' (1.1: )
Reducing stack by rule 49 (line 413):
   $1 = nterm relational_expression (1.1: )
   $2 = token '<' (1.1: )
   $3 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 31 63 100 133 68
Next token is token ';' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 31 63 100 133 67
Next token is token ';' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 31 63 100 133 66
Next token is token ';' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 155
Stack now 0 2 8 11 16 19 53 31 63 100 133 155
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 159
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159
Reading a token
Next token is token IDENTIFIER (1.1: x)
Shifting token IDENTIFIER (1.1: x)
Entering state 64
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 64
Reading a token
Next token is token '=' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: x)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 48
Next token is token '=' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 47
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47
Next token is token '=' (1.1: )
Shifting token '=' (1.1: )
Entering state 82
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82
Reading a token
Next token is token IDENTIFIER (1.1: x)
Shifting token IDENTIFIER (1.1: x)
Entering state 64
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 64
Reading a token
Next token is token '+' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: x)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 48
Next token is token '+' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 71
Next token is token '+' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 69
Next token is token '+' (1.1: )
Shifting token '+' (1.1: )
Entering state 111
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 69 111
Reading a token
Next token is token INT_CONSTANT (1.1: 1)
Shifting token INT_CONSTANT (1.1: 1)
Entering state 26
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 69 111 26
Reducing stack by rule 69 (line 557):
   $1 = token INT_CONSTANT (1.1: 1)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 69 111 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 69 111 48
Reading a token
Next token is token ')' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 69 111 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 144
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 69 111 144
Next token is token ')' (1.1: )
Reducing stack by rule 54 (line 430):
   $1 = nterm additive_expression (1.1: )
   $2 = token '+' (1.1: )
   $3 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 69
Next token is token ')' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 68
Next token is token ')' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 67
Next token is token ')' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 66
Next token is token ')' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 121
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 47 82 121
Next token is token ')' (1.1: )
Reducing stack by rule 37 (line 368):
   $1 = nterm unary_expression (1.1: )
   $2 = token '=' (1.1: )
   $3 = nterm expression (1.1: )
-> $$ = nterm assignment_expression (1.1: )
Entering state 161
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 161
Next token is token ')' (1.1: )
Shifting token ')' (1.1: )
Entering state 162
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 161 162
Reading a token
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 40
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 161 162 40
Reducing stack by rule 30 (line 345):
   $1 = token ';' (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 163
Stack now 0 2 8 11 16 19 53 31 63 100 133 155 159 161 162 163
Reducing stack by rule 81 (line 604):
   $1 = token FOR (1.1: for)
   $2 = token '(' (1.1: )
   $3 = nterm assignment_expression (1.1: )
   $4 = token ';' (1.1: )
   $5 = nterm expression (1.1: )
   $6 = token ';' (1.1: )
   $7 = nterm assignment_expression (1.1: )
   $8 = token ')' (1.1: )
   $9 = nterm statement (1.1: )
-> $$ = nterm iteration_statement (1.1: )
Entering state 52
Stack now 0 2 8 11 16 19 53 52
Reducing stack by rule 33 (line 354):
   $1 = nterm iteration_statement (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 43
Stack now 0 2 8 11 16 19 53 43
Reducing stack by rule 28 (line 331):
   $1 = nterm statement (1.1: )
-> $$ = nterm statement_list (1.1: )
Entering state 89
Stack now 0 2 8 11 16 19 53 89
Reading a token
Next token is token IDENTIFIER (1.1: sapiens)
Shifting token IDENTIFIER (1.1: sapiens)
Entering state 25
Stack now 0 2 8 11 16 19 53 89 25
Reading a token
Next token is token '.' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: sapiens)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 48
Next token is token '.' (1.1: )
Shifting token '.' (1.1: )
Entering state 86
Stack now 0 2 8 11 16 19 53 89 48 86
Reading a token
Next token is token IDENTIFIER (1.1: page)
Shifting token IDENTIFIER (1.1: page)
Entering state 124
Stack now 0 2 8 11 16 19 53 89 48 86 124
Reducing stack by rule 65 (line 507):
   $1 = nterm postfix_expression (1.1: )
   $2 = token '.' (1.1: )
   $3 = token IDENTIFIER (1.1: page)
using this rule
symtab constr, structname: struct book
Member page not found in struct book
Error: Member DNE at 1.1
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 48
Reading a token
Next token is token '=' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 47
Stack now 0 2 8 11 16 19 53 89 47
Next token is token '=' (1.1: )
Shifting token '=' (1.1: )
Entering state 82
Stack now 0 2 8 11 16 19 53 89 47 82
Reading a token
Next token is token INT_CONSTANT (1.1: 1)
Shifting token INT_CONSTANT (1.1: 1)
Entering state 26
Stack now 0 2 8 11 16 19 53 89 47 82 26
Reducing stack by rule 69 (line 557):
   $1 = token INT_CONSTANT (1.1: 1)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 47 82 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 47 82 48
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 89 47 82 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 89 47 82 71
Next token is token ';' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 89 47 82 69
Next token is token ';' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 89 47 82 68
Next token is token ';' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 89 47 82 67
Next token is token ';' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 89 47 82 66
Next token is token ';' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 121
Stack now 0 2 8 11 16 19 53 89 47 82 121
Next token is token ';' (1.1: )
Reducing stack by rule 37 (line 368):
   $1 = nterm unary_expression (1.1: )
   $2 = token '=' (1.1: )
   $3 = nterm expression (1.1: )
-> $$ = nterm assignment_expression (1.1: )
Entering state 44
Stack now 0 2 8 11 16 19 53 89 44
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 81
Stack now 0 2 8 11 16 19 53 89 44 81
Reducing stack by rule 38 (line 373):
   $1 = nterm assignment_expression (1.1: )
   $2 = token ';' (1.1: )
-> $$ = nterm assignment_statement (1.1: )
Entering state 45
Stack now 0 2 8 11 16 19 53 89 45
Reducing stack by rule 34 (line 357):
   $1 = nterm assignment_statement (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 80
Stack now 0 2 8 11 16 19 53 89 80
Reducing stack by rule 29 (line 339):
   $1 = nterm statement_list (1.1: )
   $2 = nterm statement (1.1: )
-> $$ = nterm statement_list (1.1: )
Entering state 89
Stack now 0 2 8 11 16 19 53 89
Reading a token
Next token is token IF (1.1: if)
Shifting token IF (1.1: if)
Entering state 29
Stack now 0 2 8 11 16 19 53 89 29
Reading a token
Next token is token '(' (1.1: )
Shifting token '(' (1.1: )
Entering state 61
Stack now 0 2 8 11 16 19 53 89 29 61
Reading a token
Next token is token IDENTIFIER (1.1: y)
Shifting token IDENTIFIER (1.1: y)
Entering state 64
Stack now 0 2 8 11 16 19 53 89 29 61 64
Reading a token
Next token is token '>' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: y)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 29 61 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 29 61 48
Next token is token '>' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 89 29 61 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 89 29 61 71
Next token is token '>' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 89 29 61 69
Next token is token '>' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 89 29 61 68
Next token is token '>' (1.1: )
Shifting token '>' (1.1: )
Entering state 110
Stack now 0 2 8 11 16 19 53 89 29 61 68 110
Reading a token
Next token is token INT_CONSTANT (1.1: 1)
Shifting token INT_CONSTANT (1.1: 1)
Entering state 26
Stack now 0 2 8 11 16 19 53 89 29 61 68 110 26
Reducing stack by rule 69 (line 557):
   $1 = token INT_CONSTANT (1.1: 1)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 29 61 68 110 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 29 61 68 110 48
Reading a token
Next token is token ')' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 89 29 61 68 110 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 89 29 61 68 110 71
Next token is token ')' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 143
Stack now 0 2 8 11 16 19 53 89 29 61 68 110 143
Next token is token ')' (1.1: )
Reducing stack by rule 50 (line 416):
   $1 = nterm relational_expression (1.1: )
   $2 = token '>' (1.1: )
   $3 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 89 29 61 68
Next token is token ')' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 89 29 61 67
Next token is token ')' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 89 29 61 66
Next token is token ')' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 98
Stack now 0 2 8 11 16 19 53 89 29 61 98
Next token is token ')' (1.1: )
Shifting token ')' (1.1: )
Entering state 131
Stack now 0 2 8 11 16 19 53 89 29 61 98 131
Reading a token
Next token is token '{' (1.1: )
Shifting token '{' (1.1: )
Entering state 36
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36
Reading a token
Next token is token IDENTIFIER (1.1: x)
Shifting token IDENTIFIER (1.1: x)
Entering state 25
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 25
Reading a token
Next token is token '=' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: x)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 48
Next token is token '=' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 47
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47
Next token is token '=' (1.1: )
Shifting token '=' (1.1: )
Entering state 82
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82
Reading a token
Next token is token IDENTIFIER (1.1: x)
Shifting token IDENTIFIER (1.1: x)
Entering state 64
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 64
Reading a token
Next token is token '-' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: x)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 48
Next token is token '-' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 71
Next token is token '-' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 69
Next token is token '-' (1.1: )
Shifting token '-' (1.1: )
Entering state 112
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 69 112
Reading a token
Next token is token INT_CONSTANT (1.1: 1)
Shifting token INT_CONSTANT (1.1: 1)
Entering state 26
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 69 112 26
Reducing stack by rule 69 (line 557):
   $1 = token INT_CONSTANT (1.1: 1)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 69 112 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 69 112 48
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 69 112 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 145
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 69 112 145
Next token is token ';' (1.1: )
Reducing stack by rule 55 (line 442):
   $1 = nterm additive_expression (1.1: )
   $2 = token '-' (1.1: )
   $3 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 69
Next token is token ';' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 68
Next token is token ';' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 67
Next token is token ';' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 66
Next token is token ';' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 121
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 47 82 121
Next token is token ';' (1.1: )
Reducing stack by rule 37 (line 368):
   $1 = nterm unary_expression (1.1: )
   $2 = token '=' (1.1: )
   $3 = nterm expression (1.1: )
-> $$ = nterm assignment_expression (1.1: )
Entering state 44
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 44
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 81
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 44 81
Reducing stack by rule 38 (line 373):
   $1 = nterm assignment_expression (1.1: )
   $2 = token ';' (1.1: )
-> $$ = nterm assignment_statement (1.1: )
Entering state 45
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 45
Reducing stack by rule 34 (line 357):
   $1 = nterm assignment_statement (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 43
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 43
Reducing stack by rule 28 (line 331):
   $1 = nterm statement (1.1: )
-> $$ = nterm statement_list (1.1: )
Entering state 73
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73
Reading a token
Next token is token IDENTIFIER (1.1: y)
Shifting token IDENTIFIER (1.1: y)
Entering state 25
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 25
Reading a token
Next token is token '=' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: y)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 48
Next token is token '=' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 47
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47
Next token is token '=' (1.1: )
Shifting token '=' (1.1: )
Entering state 82
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82
Reading a token
Next token is token IDENTIFIER (1.1: y)
Shifting token IDENTIFIER (1.1: y)
Entering state 64
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 64
Reading a token
Next token is token '+' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: y)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 48
Next token is token '+' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 71
Next token is token '+' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 69
Next token is token '+' (1.1: )
Shifting token '+' (1.1: )
Entering state 111
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 69 111
Reading a token
Next token is token INT_CONSTANT (1.1: 1)
Shifting token INT_CONSTANT (1.1: 1)
Entering state 26
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 69 111 26
Reducing stack by rule 69 (line 557):
   $1 = token INT_CONSTANT (1.1: 1)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 69 111 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 69 111 48
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 69 111 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 144
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 69 111 144
Next token is token ';' (1.1: )
Reducing stack by rule 54 (line 430):
   $1 = nterm additive_expression (1.1: )
   $2 = token '+' (1.1: )
   $3 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 69
Next token is token ';' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 68
Next token is token ';' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 67
Next token is token ';' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 66
Next token is token ';' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 121
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 47 82 121
Next token is token ';' (1.1: )
Reducing stack by rule 37 (line 368):
   $1 = nterm unary_expression (1.1: )
   $2 = token '=' (1.1: )
   $3 = nterm expression (1.1: )
-> $$ = nterm assignment_expression (1.1: )
Entering state 44
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 44
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 81
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 44 81
Reducing stack by rule 38 (line 373):
   $1 = nterm assignment_expression (1.1: )
   $2 = token ';' (1.1: )
-> $$ = nterm assignment_statement (1.1: )
Entering state 45
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 45
Reducing stack by rule 34 (line 357):
   $1 = nterm assignment_statement (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 80
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 80
Reducing stack by rule 29 (line 339):
   $1 = nterm statement_list (1.1: )
   $2 = nterm statement (1.1: )
-> $$ = nterm statement_list (1.1: )
Entering state 73
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73
Reading a token
Next token is token '}' (1.1: )
Shifting token '}' (1.1: )
Entering state 116
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 36 73 116
Reducing stack by rule 31 (line 348):
   $1 = token '{' (1.1: )
   $2 = nterm statement_list (1.1: )
   $3 = token '}' (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 153
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 153
Reading a token
Next token is token ELSE (1.1: else)
Shifting token ELSE (1.1: else)
Entering state 158
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 153 158
Reading a token
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 40
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 153 158 40
Reducing stack by rule 30 (line 345):
   $1 = token ';' (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 160
Stack now 0 2 8 11 16 19 53 89 29 61 98 131 153 158 160
Reducing stack by rule 79 (line 596):
   $1 = token IF (1.1: if)
   $2 = token '(' (1.1: )
   $3 = nterm expression (1.1: )
   $4 = token ')' (1.1: )
   $5 = nterm statement (1.1: )
   $6 = token ELSE (1.1: else)
   $7 = nterm statement (1.1: )
-> $$ = nterm selection_statement (1.1: )
Entering state 51
Stack now 0 2 8 11 16 19 53 89 51
Reducing stack by rule 32 (line 351):
   $1 = nterm selection_statement (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 80
Stack now 0 2 8 11 16 19 53 89 80
Reducing stack by rule 29 (line 339):
   $1 = nterm statement_list (1.1: )
   $2 = nterm statement (1.1: )
-> $$ = nterm statement_list (1.1: )
Entering state 89
Stack now 0 2 8 11 16 19 53 89
Reading a token
Next token is token RETURN (1.1: return)
Shifting token RETURN (1.1: return)
Entering state 32
Stack now 0 2 8 11 16 19 53 89 32
Reading a token
Next token is token IDENTIFIER (1.1: y)
Shifting token IDENTIFIER (1.1: y)
Entering state 64
Stack now 0 2 8 11 16 19 53 89 32 64
Reading a token
Next token is token ';' (1.1: )
Reducing stack by rule 68 (line 545):
   $1 = token IDENTIFIER (1.1: y)
-> $$ = nterm primary_expression (1.1: )
Entering state 49
Stack now 0 2 8 11 16 19 53 89 32 49
Reducing stack by rule 61 (line 495):
   $1 = nterm primary_expression (1.1: )
-> $$ = nterm postfix_expression (1.1: )
Entering state 48
Stack now 0 2 8 11 16 19 53 89 32 48
Next token is token ';' (1.1: )
Reducing stack by rule 56 (line 456):
   $1 = nterm postfix_expression (1.1: )
-> $$ = nterm unary_expression (1.1: )
Entering state 70
Stack now 0 2 8 11 16 19 53 89 32 70
Reducing stack by rule 58 (line 464):
   $1 = nterm unary_expression (1.1: )
-> $$ = nterm multiplicative_expression (1.1: )
Entering state 71
Stack now 0 2 8 11 16 19 53 89 32 71
Next token is token ';' (1.1: )
Reducing stack by rule 53 (line 427):
   $1 = nterm multiplicative_expression (1.1: )
-> $$ = nterm additive_expression (1.1: )
Entering state 69
Stack now 0 2 8 11 16 19 53 89 32 69
Next token is token ';' (1.1: )
Reducing stack by rule 48 (line 410):
   $1 = nterm additive_expression (1.1: )
-> $$ = nterm relational_expression (1.1: )
Entering state 68
Stack now 0 2 8 11 16 19 53 89 32 68
Next token is token ';' (1.1: )
Reducing stack by rule 45 (line 399):
   $1 = nterm relational_expression (1.1: )
-> $$ = nterm equality_expression (1.1: )
Entering state 67
Stack now 0 2 8 11 16 19 53 89 32 67
Next token is token ';' (1.1: )
Reducing stack by rule 43 (line 391):
   $1 = nterm equality_expression (1.1: )
-> $$ = nterm logical_and_expression (1.1: )
Entering state 66
Stack now 0 2 8 11 16 19 53 89 32 66
Next token is token ';' (1.1: )
Reducing stack by rule 41 (line 384):
   $1 = nterm logical_and_expression (1.1: )
-> $$ = nterm expression (1.1: )
Entering state 65
Stack now 0 2 8 11 16 19 53 89 32 65
Next token is token ';' (1.1: )
Shifting token ';' (1.1: )
Entering state 103
Stack now 0 2 8 11 16 19 53 89 32 65 103
Reducing stack by rule 36 (line 363):
   $1 = token RETURN (1.1: return)
   $2 = nterm expression (1.1: )
   $3 = token ';' (1.1: )
-> $$ = nterm statement (1.1: )
Entering state 80
Stack now 0 2 8 11 16 19 53 89 80
Reducing stack by rule 29 (line 339):
   $1 = nterm statement_list (1.1: )
   $2 = nterm statement (1.1: )
-> $$ = nterm statement_list (1.1: )
Entering state 89
Stack now 0 2 8 11 16 19 53 89
Reading a token
Next token is token '}' (1.1: )
Shifting token '}' (1.1: )
Entering state 125
Stack now 0 2 8 11 16 19 53 89 125
Reducing stack by rule 27 (line 326):
   $1 = token '{' (1.1: )
   $2 = nterm declaration_list (1.1: )
   $3 = nterm statement_list (1.1: )
   $4 = token '}' (1.1: )
-> $$ = nterm compound_statement (1.1: )
Entering state 20
Stack now 0 2 8 11 16 20
Reducing stack by rule 9 (line 169):
   $1 = nterm type_specifier (1.1: )
   $2 = nterm fun_declarator (1.1: )
   $3 = nterm compound_statement (1.1: )
-> $$ = nterm function_definition (1.1: )
Entering state 14
Stack now 0 2 8 14
Reducing stack by rule 6 (line 148):
   $1 = nterm translation_unit (1.1: )
   $2 = nterm function_definition (1.1: )
-> $$ = nterm translation_unit (1.1: )
Entering state 8
Stack now 0 2 8
Reading a token
Next token is token "end of file" (1.1: )
Reducing stack by rule 2 (line 110):
   $1 = nterm $@1 (1.1: )
   $2 = nterm translation_unit (1.1: )
-> $$ = nterm begin_nterm (1.1: )
Entering state 1
Stack now 0 1
Next token is token "end of file" (1.1: )
Shifting token "end of file" (1.1: )
Entering state 3
Stack now 0 1 3
Stack now 0 1 3
Cleanup: popping token "end of file" (1.1: )
Cleanup: popping nterm begin_nterm (1.1: )
