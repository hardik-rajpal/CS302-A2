# {
# "globalST": [
# [
# "dostuff","fun",
# "global",
# 0,
# 0,
# "int"
# ],
# [
# "foo","fun",
# "global",
# 0,
# 0,
# "void"
# ],
# [
# "getint","fun",
# "global",
# 0,
# 0,
# "int"
# ],
# [
# "main","fun",
# "global",
# 0,
# 0,
# "int"
# ],
# [
# "struct book","struct",
# "global",
# 224,
# "-",
# "-"
# 
# ],
# [
# "struct person","struct",
# "global",
# 8,
# "-",
# "-"
# 
# ]
# ],
# "structs":[
# {
# "name":"struct book",
# "localST":[
# 
# [
# "author","var",
# "local",
# 8,
# 212,
# "struct person"
# ],
# [
# "authorptr","var",
# "local",
# 4,
# 220,
# "struct person*"
# ],
# [
# "pages","var",
# "local",
# 4,
# 0,
# "int"
# ],
# [
# "pg","var",
# "local",
# 200,
# 8,
# "int[10][5]"
# ],
# [
# "rating","var",
# "local",
# 4,
# 4,
# "int"
# ],
# [
# "rtptr","var",
# "local",
# 4,
# 208,
# "int*"
# ]
# ]
# }
# ,
# {
# "name":"struct person",
# "localST":[
# 
# [
# "fnc","var",
# "local",
# 4,
# 0,
# "int"
# ],
# [
# "lnc","var",
# "local",
# 4,
# 4,
# "int"
# ]
# ]
# }
# 
# ],
# "functions":[
# {
# "name":"dostuff",
# "localST":[
# [
# "a","var",
# "param",
# 4,
# 12,
# "int"
# ],
# [
# "b","var",
# "param",
# 4,
# 8,
# "int"
# ],
# [
# "t5","var",
# "local",
# 4,
# -4,
# "int"
# ]
# ]
# }
# ,
# {
# "name":"foo",
# "localST":[
# [
# "b","var",
# "param",
# 224,
# 8,
# "struct book"
# ],
# [
# "t0","var",
# "local",
# 4,
# -4,
# "struct book*"
# ],
# [
# "t1","var",
# "local",
# 4,
# -8,
# "int*"
# ],
# [
# "t2","var",
# "local",
# 4,
# -12,
# "struct book*"
# ],
# [
# "t3","var",
# "local",
# 4,
# -16,
# "int*"
# ],
# [
# "t4","var",
# "local",
# 4,
# -20,
# "int"
# ]
# ]
# }
# ,
# {
# "name":"getint",
# "localST":[
# ]
# }
# ,
# {
# "name":"main",
# "localST":[
# [
# "a","var",
# "local",
# 4,
# -4,
# "int"
# ],
# [
# "b","var",
# "local",
# 4,
# -8,
# "int"
# ],
# [
# "c","var",
# "local",
# 4,
# -12,
# "int"
# ],
# [
# "d","var",
# "local",
# 4,
# -16,
# "int"
# ],
# [
# "f","var",
# "local",
# 4000,
# -4016,
# "int[10][10][10]"
# ],
# [
# "sapiens","var",
# "local",
# 224,
# -4240,
# "struct book"
# ],
# [
# "t10","var",
# "local",
# 4,
# -4260,
# "int"
# ],
# [
# "t11","var",
# "local",
# 4000,
# -8260,
# "int*[10][10][10]"
# ],
# [
# "t12","var",
# "local",
# 4,
# -8264,
# "int"
# ],
# [
# "t13","var",
# "local",
# 4000,
# -12264,
# "int*[10][10][10]"
# ],
# [
# "t14","var",
# "local",
# 4,
# -12268,
# "int"
# ],
# [
# "t15","var",
# "local",
# 4000,
# -16268,
# "int*[10][10][10]"
# ],
# [
# "t16","var",
# "local",
# 4,
# -16272,
# "int"
# ],
# [
# "t17","var",
# "local",
# 4000,
# -20272,
# "int*[10][10][10]"
# ],
# [
# "t18","var",
# "local",
# 4,
# -20276,
# "int"
# ],
# [
# "t19","var",
# "local",
# 4,
# -20280,
# "int"
# ],
# [
# "t20","var",
# "local",
# 4,
# -20284,
# "int"
# ],
# [
# "t21","var",
# "local",
# 4,
# -20288,
# "int"
# ],
# [
# "t22","var",
# "local",
# 4,
# -20292,
# "int"
# ],
# [
# "t23","var",
# "local",
# 4,
# -20296,
# "int"
# ],
# [
# "t24","var",
# "local",
# 4,
# -20300,
# "int"
# ],
# [
# "t25","var",
# "local",
# 4,
# -20304,
# "int"
# ],
# [
# "t26","var",
# "local",
# 4,
# -20308,
# "int"
# ],
# [
# "t27","var",
# "local",
# 4,
# -20312,
# "int"
# ],
# [
# "t28","var",
# "local",
# 4,
# -20316,
# "int"
# ],
# [
# "t29","var",
# "local",
# 4,
# -20320,
# "int"
# ],
# [
# "t30","var",
# "local",
# 4,
# -20324,
# "int"
# ],
# [
# "t31","var",
# "local",
# 4,
# -20328,
# "int"
# ],
# [
# "t32","var",
# "local",
# 4,
# -20332,
# "int"
# ],
# [
# "t33","var",
# "local",
# 4,
# -20336,
# "int"
# ],
# [
# "t34","var",
# "local",
# 4,
# -20340,
# "int"
# ],
# [
# "t35","var",
# "local",
# 4,
# -20344,
# "int"
# ],
# [
# "t36","var",
# "local",
# 4,
# -20348,
# "int"
# ],
# [
# "t37","var",
# "local",
# 4,
# -20352,
# "int"
# ],
# [
# "t38","var",
# "local",
# 4,
# -20356,
# "int"
# ],
# [
# "t39","var",
# "local",
# 4,
# -20360,
# "int"
# ],
# [
# "t6","var",
# "local",
# 4,
# -4244,
# "struct book*"
# ],
# [
# "t7","var",
# "local",
# 4,
# -4248,
# "int*"
# ],
# [
# "t8","var",
# "local",
# 4,
# -4252,
# "struct book*"
# ],
# [
# "t9","var",
# "local",
# 4,
# -4256,
# "int*"
# ]
# ]
# }
# 
# ]
# }
# 
# *****************3A starts here**************
# .strlt1:
#	.string "and so does yours, %d/%d"
# .strlt0:
#	.string "my mom loves me."
# foo:
#	t0 = &b
#	t1 = t0 + 0
#	t2 = &b
#	t3 = t2 + 4
#	t4 = *t3
#	*t1 = t4
#	return
# dostuff:
#	t5 = a + b
#	a = t5
#	return a
# getint:
#	return 23
# main:
#	t6 = &sapiens
#	t7 = t6 + 0
#	*t7 = 1
#	t8 = &sapiens
#	t9 = t8 + 4
#	*t9 = 2
#	t10 = c AND_OP d
#	b = t10
#	t11 = &f
#	t12 = 400 * 2
#	t13 = t11 + t12
#	t14 = 40 * 3
#	t15 = t13 + t14
#	t16 = 4 * 4
#	t17 = t15 + t16
#	t18 = *t17
#	a = t18
#	param sapiens
#	call foo, 1
#	param 4
#	param 2
#	t19 =  call dostuff, 2
#	c = t19
#	t20 =  call getint, 0
#	b = t20
#	param .strlt0
#	call printf, 1
#	t21 = 50 + 50
#	param t21
#	param 100
#	param .strlt1
#	call printf, 3
#	d = 0
# .for_cond_L4:
#	t22 = d EQ_OP 6
#	if t22 goto .for_cond_L5
#	goto .for_exit_L21
# .for_cond_L5:
#	t23 = c NE_OP b
#	if t23 goto .for_stmt_L7
#	goto .for_exit_L21
# .for_incrementor_L6:
#	t25 = d + 1
#	d = t25
#	goto .for_cond_L4
# .for_stmt_L7:
#	nop
# .while_cond_L8:
#	t26 = b LT_OP a
#	if t26 goto .while_cond_L9
#	goto .while_exit_L20
# .while_cond_L9:
#	t27 = b GT_OP c
#	if t27 goto .while_cond_L10
#	goto .while_exit_L20
# .while_cond_L10:
#	t29 = d GT_OP c
#	if t29 goto .while_stmt_L11
#	goto .while_exit_L20
# .while_stmt_L11:
#	nop
#	d = 0
# .for_cond_L12:
#	t31 = d LT_OP 6
#	if t31 goto .for_stmt_L14
#	goto .for_exit_L19
# .for_incrementor_L13:
#	t32 = d + 1
#	d = t32
#	goto .for_cond_L12
# .for_stmt_L14:
#	nop
#	t33 = a LT_OP 1
#	if t33 goto .if_stmt_L16
#	goto .if_cond_L15
# .if_cond_L15:
#	t34 = b LT_OP 1
#	if t34 goto .if_stmt_L16
#	goto .else_stmtL17
# .if_stmt_L16:
#	t35 = c * d
#	t36 = b + t35
#	a = t36
#	goto .if_exit_L18
# .else_stmtL17:
#	t37 = b * b
#	t38 = t37 + d
#	a = t38
# .if_exit_L18:
#	nop
#	goto .for_incrementor_L13
# .for_exit_L19:
#	goto .while_cond_L8
# .while_exit_L20:
#	goto .for_incrementor_L6
# .for_exit_L21:
#	t39 = c + d
#	c = t39
#	return 0

# ****************ASM Starts here********** 
.section .rodata
.strlt1:
	.string "and so does yours, %d/%d"
.strlt0:
	.string "my mom loves me."
.text
# t0 = &b

.globl foo
foo:
pushl %ebp
movl %esp, %ebp
subl $20, %esp
movl %ebp, %eax
add $8, %eax
movl %eax, -4(%ebp)


# t1 = t0 + 0

movl -4(%ebp), %eax
addl $0, %eax
movl %eax, -8(%ebp)

# t2 = &b

movl %ebp, %eax
add $8, %eax
movl %eax, -12(%ebp)


# t3 = t2 + 4

movl -12(%ebp), %eax
addl $4, %eax
movl %eax, -16(%ebp)

# t4 = *t3

movl -16(%ebp), %eax
addl $0, %eax
movl (%eax), %eax
movl %eax, -20(%ebp)


# *t1 = t4

movl -8(%ebp), %ebx
movl -20(%ebp), %eax
movl %eax, 0(%ebx)

# return

addl $20, %esp
leave
movl $0, %eax
ret
# t5 = a + b

.globl dostuff
dostuff:
pushl %ebp
movl %esp, %ebp
subl $4, %esp
movl 12(%ebp), %eax
addl 8(%ebp), %eax
movl %eax, -4(%ebp)

# a = t5

movl -4(%ebp), %eax
movl %eax, 12(%ebp)

# return a

addl $4, %esp
movl 12(%ebp), %eax
movl %eax, 16(%ebp)
leave
movl $0, %eax
ret
# return 23

.globl getint
getint:
pushl %ebp
movl %esp, %ebp
subl $0, %esp
addl $0, %esp
movl $23, %eax
movl %eax, 8(%ebp)
leave
movl $0, %eax
ret
# t6 = &sapiens

.globl main
main:
pushl %ebp
movl %esp, %ebp
subl $20360, %esp
movl %ebp, %eax
add $-4240, %eax
movl %eax, -4244(%ebp)


# t7 = t6 + 0

movl -4244(%ebp), %eax
addl $0, %eax
movl %eax, -4248(%ebp)

# *t7 = 1

movl $1, %eax
movl -4248(%ebp), %ebx
movl %eax, (%ebx)

# t8 = &sapiens

movl %ebp, %eax
add $-4240, %eax
movl %eax, -4252(%ebp)


# t9 = t8 + 4

movl -4252(%ebp), %eax
addl $4, %eax
movl %eax, -4256(%ebp)

# *t9 = 2

movl $2, %eax
movl -4256(%ebp), %ebx
movl %eax, (%ebx)

# t10 = c AND_OP d

movl -12(%ebp), %eax
andl -16(%ebp), %eax
movl %eax, -4260(%ebp)

# b = t10

movl -4260(%ebp), %eax
movl %eax, -8(%ebp)

# t11 = &f

movl %ebp, %eax
add $-4016, %eax
movl %eax, -8260(%ebp)


# t12 = 400 * 2

movl $400, %eax
imull $2, %eax
movl %eax, -8264(%ebp)

# t13 = t11 + t12

movl -8260(%ebp), %eax
addl -8264(%ebp), %eax
movl %eax, -12264(%ebp)

# t14 = 40 * 3

movl $40, %eax
imull $3, %eax
movl %eax, -12268(%ebp)

# t15 = t13 + t14

movl -12264(%ebp), %eax
addl -12268(%ebp), %eax
movl %eax, -16268(%ebp)

# t16 = 4 * 4

movl $4, %eax
imull $4, %eax
movl %eax, -16272(%ebp)

# t17 = t15 + t16

movl -16268(%ebp), %eax
addl -16272(%ebp), %eax
movl %eax, -20272(%ebp)

# t18 = *t17

movl -20272(%ebp), %eax
addl $0, %eax
movl (%eax), %eax
movl %eax, -20276(%ebp)


# a = t18

movl -20276(%ebp), %eax
movl %eax, -4(%ebp)

# param sapiens

# call foo, 1

subl $224, %esp
movl -4464(%ebp), %eax
movl %eax, 0(%esp)
movl -4460(%ebp), %eax
movl %eax, 4(%esp)
movl -4456(%ebp), %eax
movl %eax, 8(%esp)
movl -4452(%ebp), %eax
movl %eax, 12(%esp)
movl -4448(%ebp), %eax
movl %eax, 16(%esp)
movl -4444(%ebp), %eax
movl %eax, 20(%esp)
movl -4440(%ebp), %eax
movl %eax, 24(%esp)
movl -4436(%ebp), %eax
movl %eax, 28(%esp)
movl -4432(%ebp), %eax
movl %eax, 32(%esp)
movl -4428(%ebp), %eax
movl %eax, 36(%esp)
movl -4424(%ebp), %eax
movl %eax, 40(%esp)
movl -4420(%ebp), %eax
movl %eax, 44(%esp)
movl -4416(%ebp), %eax
movl %eax, 48(%esp)
movl -4412(%ebp), %eax
movl %eax, 52(%esp)
movl -4408(%ebp), %eax
movl %eax, 56(%esp)
movl -4404(%ebp), %eax
movl %eax, 60(%esp)
movl -4400(%ebp), %eax
movl %eax, 64(%esp)
movl -4396(%ebp), %eax
movl %eax, 68(%esp)
movl -4392(%ebp), %eax
movl %eax, 72(%esp)
movl -4388(%ebp), %eax
movl %eax, 76(%esp)
movl -4384(%ebp), %eax
movl %eax, 80(%esp)
movl -4380(%ebp), %eax
movl %eax, 84(%esp)
movl -4376(%ebp), %eax
movl %eax, 88(%esp)
movl -4372(%ebp), %eax
movl %eax, 92(%esp)
movl -4368(%ebp), %eax
movl %eax, 96(%esp)
movl -4364(%ebp), %eax
movl %eax, 100(%esp)
movl -4360(%ebp), %eax
movl %eax, 104(%esp)
movl -4356(%ebp), %eax
movl %eax, 108(%esp)
movl -4352(%ebp), %eax
movl %eax, 112(%esp)
movl -4348(%ebp), %eax
movl %eax, 116(%esp)
movl -4344(%ebp), %eax
movl %eax, 120(%esp)
movl -4340(%ebp), %eax
movl %eax, 124(%esp)
movl -4336(%ebp), %eax
movl %eax, 128(%esp)
movl -4332(%ebp), %eax
movl %eax, 132(%esp)
movl -4328(%ebp), %eax
movl %eax, 136(%esp)
movl -4324(%ebp), %eax
movl %eax, 140(%esp)
movl -4320(%ebp), %eax
movl %eax, 144(%esp)
movl -4316(%ebp), %eax
movl %eax, 148(%esp)
movl -4312(%ebp), %eax
movl %eax, 152(%esp)
movl -4308(%ebp), %eax
movl %eax, 156(%esp)
movl -4304(%ebp), %eax
movl %eax, 160(%esp)
movl -4300(%ebp), %eax
movl %eax, 164(%esp)
movl -4296(%ebp), %eax
movl %eax, 168(%esp)
movl -4292(%ebp), %eax
movl %eax, 172(%esp)
movl -4288(%ebp), %eax
movl %eax, 176(%esp)
movl -4284(%ebp), %eax
movl %eax, 180(%esp)
movl -4280(%ebp), %eax
movl %eax, 184(%esp)
movl -4276(%ebp), %eax
movl %eax, 188(%esp)
movl -4272(%ebp), %eax
movl %eax, 192(%esp)
movl -4268(%ebp), %eax
movl %eax, 196(%esp)
movl -4264(%ebp), %eax
movl %eax, 200(%esp)
movl -4260(%ebp), %eax
movl %eax, 204(%esp)
movl -4256(%ebp), %eax
movl %eax, 208(%esp)
movl -4252(%ebp), %eax
movl %eax, 212(%esp)
movl -4248(%ebp), %eax
movl %eax, 216(%esp)
movl -4244(%ebp), %eax
movl %eax, 220(%esp)
call foo
addl $224, %esp

# param 4

# param 2

# t19 =  call dostuff, 2

subl $0, %esp
pushl $2
pushl $4
call dostuff
addl $8, %esp
addl $0, %esp

# c = t19

movl -20280(%ebp), %eax
movl %eax, -12(%ebp)

# t20 =  call getint, 0

subl $0, %esp
call getint
addl $0, %esp
addl $0, %esp

# b = t20

movl -20284(%ebp), %eax
movl %eax, -8(%ebp)

# param .strlt0

# call printf, 1

subl $4, %esp
pushl $.strlt0
call printf
addl $8, %esp

# t21 = 50 + 50

movl $50, %eax
addl $50, %eax
movl %eax, -20288(%ebp)

# param t21

# param 100

# param .strlt1

# call printf, 3

subl $4, %esp
pushl -20288(%ebp)
pushl $100
pushl $.strlt1
call printf
addl $16, %esp

# d = 0

movl $0, %eax
movl %eax, -16(%ebp)

# t22 = d EQ_OP 6

.for_cond_L4:
movl -16(%ebp), %eax
cmpl $6, %eax
sete %al
movzbl %al, %eax
movl %eax, -20292(%ebp)

# if t22 goto .for_cond_L5

movl -20292(%ebp), %eax
cmpl $0, %eax
jne .for_cond_L5

# goto .for_exit_L21

jmp .for_exit_L21

# t23 = c NE_OP b

.for_cond_L5:
movl -12(%ebp), %eax
movl %eax, -20296(%ebp)

# if t23 goto .for_stmt_L7

movl -20296(%ebp), %eax
cmpl $0, %eax
jne .for_stmt_L7

# goto .for_exit_L21

jmp .for_exit_L21

# t25 = d + 1

.for_incrementor_L6:
movl -16(%ebp), %eax
addl $1, %eax
movl %eax, -20304(%ebp)

# d = t25

movl -20304(%ebp), %eax
movl %eax, -16(%ebp)

# goto .for_cond_L4

jmp .for_cond_L4

# nop

.for_stmt_L7:
nop

# t26 = b LT_OP a

.while_cond_L8:
movl -8(%ebp), %eax
cmpl -4(%ebp), %eax
setl %al
movzbl %al, %eax
movl %eax, -20308(%ebp)

# if t26 goto .while_cond_L9

movl -20308(%ebp), %eax
cmpl $0, %eax
jne .while_cond_L9

# goto .while_exit_L20

jmp .while_exit_L20

# t27 = b GT_OP c

.while_cond_L9:
movl -8(%ebp), %eax
cmpl -12(%ebp), %eax
setg %al
movzbl %al, %eax
movl %eax, -20312(%ebp)

# if t27 goto .while_cond_L10

movl -20312(%ebp), %eax
cmpl $0, %eax
jne .while_cond_L10

# goto .while_exit_L20

jmp .while_exit_L20

# t29 = d GT_OP c

.while_cond_L10:
movl -16(%ebp), %eax
cmpl -12(%ebp), %eax
setg %al
movzbl %al, %eax
movl %eax, -20320(%ebp)

# if t29 goto .while_stmt_L11

movl -20320(%ebp), %eax
cmpl $0, %eax
jne .while_stmt_L11

# goto .while_exit_L20

jmp .while_exit_L20

# nop

.while_stmt_L11:
nop

# d = 0

movl $0, %eax
movl %eax, -16(%ebp)

# t31 = d LT_OP 6

.for_cond_L12:
movl -16(%ebp), %eax
cmpl $6, %eax
setl %al
movzbl %al, %eax
movl %eax, -20328(%ebp)

# if t31 goto .for_stmt_L14

movl -20328(%ebp), %eax
cmpl $0, %eax
jne .for_stmt_L14

# goto .for_exit_L19

jmp .for_exit_L19

# t32 = d + 1

.for_incrementor_L13:
movl -16(%ebp), %eax
addl $1, %eax
movl %eax, -20332(%ebp)

# d = t32

movl -20332(%ebp), %eax
movl %eax, -16(%ebp)

# goto .for_cond_L12

jmp .for_cond_L12

# nop

.for_stmt_L14:
nop

# t33 = a LT_OP 1

movl -4(%ebp), %eax
cmpl $1, %eax
setl %al
movzbl %al, %eax
movl %eax, -20336(%ebp)

# if t33 goto .if_stmt_L16

movl -20336(%ebp), %eax
cmpl $0, %eax
jne .if_stmt_L16

# goto .if_cond_L15

jmp .if_cond_L15

# t34 = b LT_OP 1

.if_cond_L15:
movl -8(%ebp), %eax
cmpl $1, %eax
setl %al
movzbl %al, %eax
movl %eax, -20340(%ebp)

# if t34 goto .if_stmt_L16

movl -20340(%ebp), %eax
cmpl $0, %eax
jne .if_stmt_L16

# goto .else_stmtL17

jmp .else_stmtL17

# t35 = c * d

.if_stmt_L16:
movl -12(%ebp), %eax
imull -16(%ebp), %eax
movl %eax, -20344(%ebp)

# t36 = b + t35

movl -8(%ebp), %eax
addl -20344(%ebp), %eax
movl %eax, -20348(%ebp)

# a = t36

movl -20348(%ebp), %eax
movl %eax, -4(%ebp)

# goto .if_exit_L18

jmp .if_exit_L18

# t37 = b * b

.else_stmtL17:
movl -8(%ebp), %eax
imull -8(%ebp), %eax
movl %eax, -20352(%ebp)

# t38 = t37 + d

movl -20352(%ebp), %eax
addl -16(%ebp), %eax
movl %eax, -20356(%ebp)

# a = t38

movl -20356(%ebp), %eax
movl %eax, -4(%ebp)

# nop

.if_exit_L18:
nop

# goto .for_incrementor_L13

jmp .for_incrementor_L13

# goto .while_cond_L8

.for_exit_L19:
jmp .while_cond_L8

# goto .for_incrementor_L6

.while_exit_L20:
jmp .for_incrementor_L6

# t39 = c + d

.for_exit_L21:
movl -12(%ebp), %eax
addl -16(%ebp), %eax
movl %eax, -20360(%ebp)

# c = t39

movl -20360(%ebp), %eax
movl %eax, -12(%ebp)

# return 0

addl $20360, %esp
movl $0, %eax
movl %eax, 8(%ebp)
leave
movl $0, %eax
ret
