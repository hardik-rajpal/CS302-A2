.strlt1:
	.string "and so does yours, %d/%d"
.strlt0:
	.string "my mom loves me."
dostuff:
	t0 = a + b
	a = t0
	return a
getint:
	return 23
main:
	t1 = c AND_OP d
	b = t1
	t2 = 400 * 2
	t3 = f + t2
	t4 = *t3
	t5 = 40 * 3
	t6 = t4 + t5
	t7 = *t6
	t8 = 4 * 4
	t9 = t7 + t8
	t10 = *t9
	a = t10
	param 4
	param 2
	t11 =  call dostuff, 2
	c = t11
	t12 =  call getint, 0
	b = t12
	param .strlt0
	call printf, 1
	t13 = 50 + 50
	param t13
	param 100
	param .strlt1
	call printf, 3
	d = 0
.for_cond_L3:
	t14 = d EQ_OP 6
	if t14 goto .for_cond_L4
	goto .for_exit_L20
.for_cond_L4:
	t15 = c NE_OP b
	if t15 goto .for_stmt_L6
	goto .for_exit_L20
.for_incrementor_L5:
	t17 = d + 1
	d = t17
	goto .for_cond_L3
.for_stmt_L6:
	nop
.while_cond_L7:
	t18 = b LT_OP a
	if t18 goto .while_cond_L8
	goto .while_exit_L19
.while_cond_L8:
	t19 = b GT_OP c
	if t19 goto .while_cond_L9
	goto .while_exit_L19
.while_cond_L9:
	t21 = d GT_OP c
	if t21 goto .while_stmt_L10
	goto .while_exit_L19
.while_stmt_L10:
	nop
	d = 0
.for_cond_L11:
	t23 = d LT_OP 6
	if t23 goto .for_stmt_L13
	goto .for_exit_L18
.for_incrementor_L12:
	t24 = d + 1
	d = t24
	goto .for_cond_L11
.for_stmt_L13:
	nop
	t25 = a LT_OP 1
	if t25 goto .if_stmt_L15
	goto .if_cond_L14
.if_cond_L14:
	t26 = b LT_OP 1
	if t26 goto .if_stmt_L15
	goto .else_stmtL16
.if_stmt_L15:
	t27 = c * d
	t28 = b + t27
	a = t28
	goto .if_exit_L17
.else_stmtL16:
	t29 = b * b
	t30 = t29 + d
	a = t30
.if_exit_L17:
	nop
	goto .for_incrementor_L12
.for_exit_L18:
	goto .while_cond_L7
.while_exit_L19:
	goto .for_incrementor_L5
.for_exit_L20:
	t31 = c + d
	c = t31
	return 0

****************ASM Starts here********** 
.strlt1:
	.string "and so does yours, %d/%d"
.strlt0:
	.string "my mom loves me."
dostuff:
	movl 16(%ebp), %eax
addl 12(%ebp), %eax
movl %eax, -4%(ebp)

	movl 16(%ebp), %eax
movl %eax, 16(%ebp)
ret

getint:
	movl $23, %eax
movl %eax, 0(%ebp)
ret

main:
	movl -12(%ebp), %eax
andl -16(%ebp), %eax
movl %eax, -4024%(ebp)

	400, movl %eax
movl %eax, -4028%(ebp)

	movl -4016(%ebp), %eax
addl -4028(%ebp), %eax
movl %eax, -4032%(ebp)

	40, movl %eax
movl %eax, -4040%(ebp)

	movl -4036(%ebp), %eax
addl -4040(%ebp), %eax
movl %eax, -4044%(ebp)

	4, movl %eax
movl %eax, -4052%(ebp)

	movl -4048(%ebp), %eax
addl -4052(%ebp), %eax
movl %eax, -4056%(ebp)

	pushl $4

	pushl $2

	pushl $.strlt0

	call printf

	50, movl %eax
addl $50, %eax
movl %eax, -4072%(ebp)

	pushl -4072(%ebp)

	pushl $100

	pushl $.strlt1

	call printf

.for_cond_L3:
	movl -16(%ebp), %eax
movl %eax, -4076%(ebp)

.for_cond_L4:
	movl -12(%ebp), %eax
movl %eax, -4080%(ebp)

.for_incrementor_L5:
	movl -16(%ebp), %eax
addl $1, %eax
movl %eax, -4088%(ebp)

.for_stmt_L6:
	movl -8(%ebp), %eax
movl %eax, -4092%(ebp)

.while_cond_L8:
	movl -8(%ebp), %eax
movl %eax, -4096%(ebp)

.while_cond_L9:
	movl -16(%ebp), %eax
movl %eax, -4104%(ebp)

.while_stmt_L10:
	movl -16(%ebp), %eax
movl %eax, -4112%(ebp)

.for_incrementor_L12:
	movl -16(%ebp), %eax
addl $1, %eax
movl %eax, -4116%(ebp)

.for_stmt_L13:
	movl -4(%ebp), %eax
movl %eax, -4120%(ebp)

.if_cond_L14:
	movl -8(%ebp), %eax
movl %eax, -4124%(ebp)

.if_stmt_L15:
	movl -12(%ebp), %eax
movl %eax, -4128%(ebp)

	movl -8(%ebp), %eax
addl -4128(%ebp), %eax
movl %eax, -4132%(ebp)

.else_stmtL16:
	movl -8(%ebp), %eax
movl %eax, -4136%(ebp)

	movl -4136(%ebp), %eax
addl -16(%ebp), %eax
movl %eax, -4140%(ebp)

.if_exit_L17:
	movl -12(%ebp), %eax
addl -16(%ebp), %eax
movl %eax, -4144%(ebp)

	movl $0, %eax
movl %eax, 0(%ebp)
ret

